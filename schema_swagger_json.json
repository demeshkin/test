{
  "swagger": "2.0",
  "info": {
    "title": "Workato API (params in:body)",
    "description": "\n<p>Workato REST API provides access the Workato resources. You can manage recipes, connections and jobs programmatically using API. API also allows you to author new recipes and modify existing recipes.</p>\n\n<h3 id=\"label-Authentication\">Authentication<span><a href=\"#label-Authentication\">&para;</a> <a href=\"#top\">&uarr;</a></span></h3>\n\n<p>All API requests must provide <code>user_token</code> &amp; <code>user_email</code> in query parameters or in request headers. The <code>user_token</code> is provided in your <a href=\"/users/current/edit/api_key\">settings</a> page.</p>\n",
    "version": "1.0",
    "x-copyright": null
  },
  "basePath": "/api",
  "consumes": [
    "application/json"
  ],
  "paths": {
    "/on_prem_agents": {
      "get": {
        "tags": [
          "on_prem_agents"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_on_prem_agents",
        "summary": "List On-prem Agents",
        "parameters": [

        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/on_prem_agent_fields"
              }
            }
          }
        },
        "description": "List all On-prem agents in your workspace"
      },
      "post": {
        "tags": [
          "on_prem_agents"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_on_prem_agents",
        "summary": "Create On-prem Agent",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "on_prem_group_id": {
                  "type": "number",
                  "required": true,
                  "description": "On-prem group ID"
                },
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "On-prem agent name"
                },
                "enabled": {
                  "type": "string",
                  "description": "On-prem agent enabled state"
                },
                "os": {
                  "type": "string",
                  "enum": [
                    "windows",
                    "linux",
                    "mac",
                    "docker"
                  ],
                  "description": "On-prem agent operating system"
                },
                "installation_method": {
                  "type": "string",
                  "enum": [
                    "tgz",
                    "deb",
                    "rpm",
                    "exe"
                  ],
                  "description": "On-prem agent installation method"
                }
              },
              "additionalProperties": false,
              "required": [
                "on_prem_group_id",
                "name"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/on_prem_agent_fields"
            }
          }
        },
        "description": "Create an On-prem agent"
      }
    },
    "/on_prem_agents/search": {
      "get": {
        "tags": [
          "on_prem_agents"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_on_prem_agents_search",
        "summary": "Search for On-prem Agent by common name",
        "parameters": [
          {
            "name": "cn",
            "type": "string",
            "in": "query",
            "description": "Common name of on-prem agent"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/on_prem_agent_fields"
              }
            }
          }
        },
        "description": "Get On-prem agents that matches a common name"
      }
    },
    "/on_prem_agents/{id}": {
      "get": {
        "tags": [
          "on_prem_agents"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_on_prem_agents_id",
        "summary": "Get On-prem Agent details",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "On-prem agent ID"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/on_prem_agent_fields"
            }
          }
        },
        "description": "Get details of an On-prem agent"
      },
      "put": {
        "tags": [
          "on_prem_agents"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_on_prem_agents_id",
        "summary": "Update On-prem Agent",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "On-prem agent ID"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "On-prem agent name"
                },
                "enabled": {
                  "type": "string",
                  "description": "On-prem agent enabled state"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/on_prem_agent_fields"
            }
          }
        },
        "description": "Update an On-prem agent"
      },
      "delete": {
        "tags": [
          "on_prem_agents"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "delete_on_prem_agents_id",
        "summary": "Delete On-prem Agent",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "On-prem agent ID"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "required": true,
                  "description": "Always returns 'true' on success"
                }
              },
              "additionalProperties": false,
              "required": [
                "success"
              ]
            }
          }
        },
        "description": "Delete an On-prem agent"
      }
    },
    "/on_prem_agents/{id}/status": {
      "get": {
        "tags": [
          "on_prem_agents"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_on_prem_agents_id_status",
        "summary": "Get On-prem Agent status",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "On prem agent ID"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "active": {
                  "type": "boolean",
                  "required": true,
                  "description": "True if the agent is active"
                }
              },
              "additionalProperties": false,
              "required": [
                "active"
              ]
            }
          }
        },
        "description": "Get status of an On-prem agent"
      }
    },
    "/on_prem_agents/{id}/melody_data": {
      "get": {
        "tags": [
          "on_prem_agents"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_on_prem_agents_id_melody_data",
        "summary": "Get onprem agent melody data",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "On prem agent ID"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "description": ""
      }
    },
    "/on_prem_agents/{id}/melody_pdf": {
      "get": {
        "tags": [
          "on_prem_agents"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_on_prem_agents_id_melody_pdf",
        "summary": "Get onprem agent melody report as pdf",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "On prem agent ID"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "description": ""
      }
    },
    "/on_prem_agents/{id}/melody_heap": {
      "get": {
        "tags": [
          "on_prem_agents"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_on_prem_agents_id_melody_heap",
        "summary": "Get onprem agent melody heap dump as zip",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "On prem agent ID"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "description": ""
      }
    },
    "/on_prem_agents/{id}/melody_monitoring": {
      "get": {
        "tags": [
          "on_prem_agents"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_on_prem_agents_id_melody_monitoring",
        "summary": "Get any onprem agent melody artifact",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "On prem agent ID"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "description": ""
      }
    },
    "/recipes/{recipe_id}/jobs/{id}": {
      "get": {
        "tags": [
          "jobs"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_recipes_recipe_id_jobs_id",
        "summary": "Get details of a job",
        "parameters": [
          {
            "name": "recipe_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Recipe ID"
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Job handle"
          },
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "query",
            "required": true,
            "description": "Embedded customer Account ID/External ID. External IDs should be prefixed with 'E' (e.g., 'EA2300') and URL-encoded."
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "handle": {
                  "type": "string",
                  "required": true,
                  "description": "Job handle"
                },
                "recipe_id": {
                  "type": "number",
                  "required": true,
                  "description": "Recipe ID"
                },
                "id": {
                  "type": "string",
                  "required": true,
                  "description": "Job handle"
                },
                "completed_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                },
                "started_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                },
                "title": {
                  "type": "string",
                  "required": true,
                  "description": "Description of the job"
                },
                "is_poll_error": {
                  "type": "boolean",
                  "required": true,
                  "description": "Returns true if an error occurred in the trigger while polling, otherwise returns false"
                },
                "error": {
                  "type": "string",
                  "required": true,
                  "description": "Contains job title or job error when there is an error. Otherwise, it returns null."
                },
                "error_parts": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "required": true,
                      "description": "Error message"
                    },
                    "error_type": {
                      "type": "string",
                      "required": true,
                      "description": "Type of the error"
                    },
                    "error_id": {
                      "type": "string",
                      "required": true,
                      "description": "ID of the error"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "message",
                    "error_type",
                    "error_id"
                  ]
                },
                "is_error": {
                  "type": "boolean",
                  "required": true,
                  "description": "Returns true if the job has an error, otherwise returns false"
                },
                "lines": {
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "type": "array",
                  "required": true,
                  "description": "Details of each line in the recipe"
                },
                "is_repeat": {
                  "type": "boolean",
                  "required": true,
                  "description": "Returns true if the job is a repeat of another job"
                },
                "is_test": {
                  "type": "boolean",
                  "required": true,
                  "description": "Returns true if the job is a test job"
                },
                "is_test_case_job": {
                  "type": "boolean",
                  "required": true,
                  "description": "Returns true if the job is a test case job"
                },
                "master_job_id": {
                  "type": "string",
                  "required": true,
                  "description": "Master job ID"
                },
                "master_job_handle": {
                  "type": "string",
                  "required": true,
                  "description": "Master job handle"
                },
                "status": {
                  "type": "string",
                  "required": true,
                  "description": "Job status"
                },
                "calling_recipe_id": {
                  "type": "string",
                  "required": true,
                  "description": "Calling recipe ID. Available if this recipe is called by a parent recipe."
                },
                "calling_job_id": {
                  "type": "string",
                  "required": true,
                  "description": "Calling job ID. Available if this recipe is created by a called recipe."
                },
                "calling_job_handle": {
                  "type": "string",
                  "required": true,
                  "description": "Calling job handle. Available if this recipe is called by a parent recipe."
                }
              },
              "additionalProperties": false,
              "required": [
                "handle",
                "recipe_id",
                "id",
                "completed_at",
                "started_at",
                "title",
                "is_poll_error",
                "error",
                "error_parts",
                "is_error",
                "lines",
                "is_repeat",
                "is_test",
                "is_test_case_job",
                "master_job_id",
                "master_job_handle",
                "status",
                "calling_recipe_id",
                "calling_job_id",
                "calling_job_handle"
              ]
            }
          }
        },
        "description": "Get details of a job"
      }
    },
    "/managed_users/{managed_user_id}/recipes/{recipe_id}/jobs": {
      "get": {
        "tags": [
          "jobs"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_managed_users_managed_user_id_recipes_recipe_id_jobs",
        "summary": "List jobs belonging to recipe",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Embedded customer Account ID/External ID. External IDs should be prefixed with 'E' (e.g., 'EA2300') and URL-encoded."
          },
          {
            "name": "recipe_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Recipe ID"
          },
          {
            "name": "offset_job_id",
            "type": "string",
            "in": "query",
            "description": "Offset job ID or job rerun ID"
          },
          {
            "name": "prev",
            "type": "string",
            "in": "query",
            "description": "Defaults to false. When prev=false, this call returns jobs completed prior to the offset_job_id. If prev=true, jobs newer than the offset_job_id are returned."
          },
          {
            "name": "status",
            "type": "string",
            "enum": [
              "succeeded",
              "failed",
              "pending"
            ],
            "in": "query",
            "description": "Filter by status - succeeded, failed or pending"
          },
          {
            "name": "rerun_only",
            "type": "string",
            "enum": [
              "true",
              "false"
            ],
            "in": "query",
            "description": "If true, returns jobs that were rerun only"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "job_succeeded_count": {
                  "type": "number",
                  "required": true,
                  "description": "Number of successful jobs"
                },
                "job_failed_count": {
                  "type": "number",
                  "required": true,
                  "description": "Number of failed jobs"
                },
                "job_count": {
                  "type": "number",
                  "required": true,
                  "description": "Total number of jobs"
                },
                "job_scope_count": {
                  "type": "number",
                  "required": true,
                  "description": "Number of jobs matching the given criteria"
                },
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "required": true,
                        "description": "Job handle"
                      },
                      "completed_at": {
                        "type": "string",
                        "required": true,
                        "description": "Timestamp in ISO 8601 format"
                      },
                      "started_at": {
                        "type": "string",
                        "required": true,
                        "description": "Timestamp in ISO 8601 format"
                      },
                      "title": {
                        "type": "string",
                        "required": true,
                        "description": "Description of the job"
                      },
                      "is_poll_error": {
                        "type": "boolean",
                        "required": true,
                        "description": "Returns true if an error occurred in the trigger while polling, otherwise returns false"
                      },
                      "error": {
                        "type": "string",
                        "required": true,
                        "description": "Contains job title or job error when there is an error. Otherwise, it returns null."
                      },
                      "error_parts": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "required": true,
                            "description": "Error message"
                          },
                          "error_type": {
                            "type": "string",
                            "required": true,
                            "description": "Type of the error"
                          },
                          "error_id": {
                            "type": "string",
                            "required": true,
                            "description": "ID of the error"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "message",
                          "error_type",
                          "error_id"
                        ]
                      },
                      "is_error": {
                        "type": "boolean",
                        "required": true,
                        "description": "Returns true if the job has an error, otherwise returns false"
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "id",
                      "completed_at",
                      "started_at",
                      "title",
                      "is_poll_error",
                      "error",
                      "error_parts",
                      "is_error"
                    ]
                  }
                }
              },
              "additionalProperties": false,
              "required": [
                "job_succeeded_count",
                "job_failed_count",
                "job_count",
                "job_scope_count",
                "items"
              ]
            }
          }
        },
        "description": "Returns aggregated job information as well as detailed job information for a specified recipe in Workato."
      }
    },
    "/packages/{id}": {
      "get": {
        "tags": [
          "packages"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_packages_id",
        "summary": "Get package",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Package ID"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "required": true,
                  "description": "Package ID"
                },
                "operation_type": {
                  "type": "string",
                  "required": true,
                  "description": "Operation type: import or export"
                },
                "status": {
                  "type": "string",
                  "required": true,
                  "description": "Operation status: completed, in_progress, failed"
                },
                "error": {
                  "type": "string",
                  "required": true,
                  "description": "Error description if operation failed"
                },
                "export_manifest_id": {
                  "type": "number",
                  "required": true,
                  "description": "Manifest ID for export operations"
                },
                "download_url": {
                  "type": "string",
                  "required": true,
                  "description": "Package download URL if completed, null otherwise"
                },
                "recipe_status": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "required": true,
                  "description": "Id and Import status updated recipes for package"
                }
              },
              "additionalProperties": false,
              "required": [
                "id",
                "operation_type",
                "status",
                "error",
                "export_manifest_id",
                "download_url",
                "recipe_status"
              ]
            }
          }
        },
        "description": ""
      }
    },
    "/packages/export/{manifest_id}": {
      "post": {
        "tags": [
          "packages"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_packages_export_manifest_id",
        "summary": "Export package based on the manifest.",
        "parameters": [
          {
            "name": "manifest_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Export manifest ID"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "required": true,
                  "description": "Package ID"
                },
                "operation_type": {
                  "type": "string",
                  "required": true,
                  "description": "Operation type: import or export"
                },
                "status": {
                  "type": "string",
                  "required": true,
                  "description": "Operation status: completed, in_progress, failed"
                },
                "error": {
                  "type": "string",
                  "required": true,
                  "description": "Error description if operation failed"
                },
                "export_manifest_id": {
                  "type": "number",
                  "required": true,
                  "description": "Manifest ID for export operations"
                },
                "download_url": {
                  "type": "string",
                  "required": true,
                  "description": "Package download URL if completed, null otherwise"
                }
              },
              "additionalProperties": false,
              "required": [
                "id",
                "operation_type",
                "status",
                "error",
                "export_manifest_id",
                "download_url"
              ]
            }
          }
        },
        "description": ""
      }
    },
    "/packages/import/{folder_id}": {
      "post": {
        "tags": [
          "packages"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_packages_import_folder_id",
        "summary": "Import a package into the folder",
        "parameters": [
          {
            "name": "folder_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Folder ID"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "restart_recipes": {
                  "type": "string",
                  "description": "Set 'true' to allow restarting of the running recipes"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "required": true,
                  "description": "Package ID"
                },
                "operation_type": {
                  "type": "string",
                  "required": true,
                  "description": "Operation type: import or export"
                },
                "status": {
                  "type": "string",
                  "required": true,
                  "description": "Operation status: completed, in_progress, failed"
                },
                "error": {
                  "type": "string",
                  "required": true,
                  "description": "Error description if operation failed"
                },
                "download_url": {
                  "type": "string",
                  "required": true,
                  "description": "Package download URL if completed, null otherwise"
                }
              },
              "additionalProperties": false,
              "required": [
                "id",
                "operation_type",
                "status",
                "error",
                "download_url"
              ]
            }
          }
        },
        "description": "    Import a package (zip file) into the folder. Input is a \"application/octet-stream\" payload containg a package content.\n    `restart_recipes` should be \"true\" in order to restart running recipes.\n"
      }
    },
    "/packages/{id}/download": {
      "get": {
        "tags": [
          "packages"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_packages_id_download",
        "summary": "Download the package",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Package ID"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        },
        "description": "    Redirects to package content or returns 404 if package not found or doesn't have content\n"
      }
    },
    "/api_collections": {
      "get": {
        "tags": [
          "api_groups"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_api_collections",
        "summary": "List API collections",
        "parameters": [
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Number of API collections to return in a single page. Defaults to 100. Max is 100."
          },
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Page number of the API collections to fetch. Defaults to 1."
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/api_collection_fields"
              }
            }
          }
        },
        "description": "List all API collections. The endpoint returns the project_id of the project to which the collections belong in the response."
      },
      "post": {
        "tags": [
          "api_groups"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_api_collections",
        "summary": "Create an API collection",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Name of the collection"
                },
                "project_id": {
                  "type": "string",
                  "description": "The ID of a specific project. Retrieve a list of project IDs using the list projects endpoint."
                }
              },
              "additionalProperties": false,
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/api_collection_fields"
              }
            }
          }
        },
        "description": "Create an API collection within a project you specify"
      }
    },
    "/job/resume": {
      "post": {
        "tags": [
          "job"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_job_resume",
        "summary": "Resume job",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "required": true,
                  "description": "Resume token"
                },
                "data": {
                  "type": "string",
                  "description": "Resume data"
                }
              },
              "additionalProperties": false,
              "required": [
                "token"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          }
        },
        "description": ""
      }
    },
    "/lookup_tables": {
      "get": {
        "tags": [
          "lookup_tables"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_lookup_tables",
        "summary": "List lookup tables",
        "parameters": [
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Page number of the lookup tables to fetch. Defaults to 1."
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Number of lookup tables to return in a single page. Defaults to 100. Max is 100."
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Array of lookup tables",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/lookup_table_fields"
              }
            }
          }
        },
        "description": "Returns a list of lookup tables belonging to customer account. Workato includes the project_id of the project to which the lookup table belongs in the response."
      },
      "post": {
        "tags": [
          "lookup_tables"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_lookup_tables",
        "summary": "Create a new lookup table",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "lookup_table": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "required": true,
                      "description": "Provide a name for your new lookup table."
                    },
                    "project_id": {
                      "type": "number",
                      "description": "Specify a project_id to scope the lookup table to a specific project. If you do not provide a project_id, the lookup table's scope is global."
                    },
                    "schema": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Determine the structure of your lookup table by supplying a schema and specifying the name of each of the columns in your table, for example: [{ \"label\": \"Name\" }]. Lookup tables support a maximum of ten columns."
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "name"
                  ]
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "422": {
            "description": "Invalid attributes"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/lookup_table_fields"
            }
          }
        },
        "description": "Create a new lookup table. Depending on your requirements, you can choose to make the lookup table available for general access across your workspace or limit its scope to a specific project."
      }
    },
    "/lookup_tables/{lookup_table_id}/rows/{row_id}": {
      "get": {
        "tags": [
          "lookup_tables"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_lookup_tables_lookup_table_id_rows_row_id",
        "summary": "Get a row",
        "parameters": [
          {
            "name": "lookup_table_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Lookup table ID"
          },
          {
            "name": "row_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Lookup table row ID"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/lookup_table_row_fields"
            }
          }
        },
        "description": "Get a row from the lookup table"
      },
      "put": {
        "tags": [
          "lookup_tables"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_lookup_tables_lookup_table_id_rows_row_id",
        "summary": "Update a row",
        "parameters": [
          {
            "name": "lookup_table_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Lookup table ID"
          },
          {
            "name": "row_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Lookup table row ID"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "additionalProperties": true,
                  "required": true,
                  "description": "The hash containing the data for the updated row in the form of column_name:value pairs. For example, { \"name\": \"United States\", \"code\": \"USA\" }. Only the columns provided are updated."
                }
              },
              "additionalProperties": false,
              "required": [
                "data"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply. Also returns an error message on failures in this format { \"error\": \"error_message\" }",
            "schema": {
              "$ref": "#/definitions/lookup_table_row_fields"
            }
          }
        },
        "description": "Updates a row in the lookup table"
      },
      "delete": {
        "tags": [
          "lookup_tables"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "delete_lookup_tables_lookup_table_id_rows_row_id",
        "summary": "Delete a row",
        "parameters": [
          {
            "name": "lookup_table_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Lookup table ID"
          },
          {
            "name": "row_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Lookup table row ID"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply. Also returns an error message on failures in this format { \"error\": \"error_message\" }",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "required": true,
                  "description": "Always returns 'true' on success"
                }
              },
              "additionalProperties": false,
              "required": [
                "success"
              ]
            }
          }
        },
        "description": "Delete a row from the lookup table"
      }
    },
    "/lookup_tables/{lookup_table_id}/rows": {
      "post": {
        "tags": [
          "lookup_tables"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_lookup_tables_lookup_table_id_rows",
        "summary": "Add a row",
        "parameters": [
          {
            "name": "lookup_table_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Lookup table ID"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "additionalProperties": true,
                  "required": true,
                  "description": "The hash containing the data for the new row in the form of column_name:value pairs. For example, { \"name\": \"United States\", \"code\": \"USA\" }"
                }
              },
              "additionalProperties": false,
              "required": [
                "data"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply. Also returns an error message on failures in this format { \"error\": \"error_message\" }",
            "schema": {
              "$ref": "#/definitions/lookup_table_row_fields"
            }
          }
        },
        "description": "Adds a row to the lookup table"
      },
      "get": {
        "tags": [
          "lookup_tables"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_lookup_tables_lookup_table_id_rows",
        "summary": "List rows",
        "parameters": [
          {
            "name": "lookup_table_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Lookup table ID"
          },
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Page number of the lookup table rows to fetch. Defaults to 1."
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Number of API clients to return in a single page. Defaults to 500. Max is 1000."
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply. Also returns an error message on failures in this format { \"error\": \"error_message\" }",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/lookup_table_row_fields"
              }
            }
          }
        },
        "description": "Returns a lists of rows from the lookup table. Supports filtering and pagination."
      }
    },
    "/lookup_tables/{lookup_table_id}/lookup": {
      "get": {
        "tags": [
          "lookup_tables"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_lookup_tables_lookup_table_id_lookup",
        "summary": "Lookup a row",
        "parameters": [
          {
            "name": "lookup_table_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Lookup table ID"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/lookup_table_row_fields"
            }
          }
        },
        "description": "Finds the first row matching the given criteria in the lookup table. Returns a 404 when the lookup fails."
      }
    },
    "/lookup_tables/batch_delete": {
      "post": {
        "tags": [
          "lookup_tables"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_lookup_tables_batch_delete",
        "summary": "Delete lookup tables in batch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "required": true,
                  "description": "Include the ID(s) of the lookup table(s) you plan to delete"
                }
              },
              "additionalProperties": false,
              "required": [
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Details of the delete action",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "deleted": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      },
                      "required": true,
                      "description": "Array of IDs of the deleted lookup tables. Returns an empty array if all the lookup tables are successfully deleted."
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "deleted"
                  ]
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "lookup_table_id": {
                        "type": "number",
                        "required": true,
                        "description": "Lookup table ID"
                      },
                      "error": {
                        "type": "string",
                        "required": true,
                        "description": "Error while deleting the lookup table"
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "lookup_table_id",
                      "error"
                    ]
                  }
                }
              },
              "additionalProperties": false,
              "required": [
                "data",
                "errors"
              ]
            }
          }
        },
        "description": "Use this endpoint to delete lookup tables in batch"
      }
    },
    "/pubsub/topics/{topic_id}/consume": {
      "post": {
        "tags": [
          "pubsub"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_pubsub_topics_topic_id_consume",
        "summary": "Get messages from offset",
        "parameters": [
          {
            "name": "topic_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Topic ID"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "after_message_id": {
                  "type": "string",
                  "description": "Read messages after this message_id"
                },
                "since_time": {
                  "type": "string",
                  "description": "Read messages starting from this time"
                },
                "batch_size": {
                  "type": "number",
                  "description": "Batch size. Default: 50. Maximum: 50"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "408": {
            "description": "Timeout"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "messages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message_id": {
                        "type": "string",
                        "required": true,
                        "description": "Message ID"
                      },
                      "payload": {
                        "type": "object",
                        "additionalProperties": true,
                        "required": true,
                        "description": "Message payload"
                      },
                      "time": {
                        "type": "string",
                        "required": true,
                        "description": "DateTime in RFC 3339 format"
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "message_id",
                      "payload",
                      "time"
                    ]
                  }
                }
              },
              "additionalProperties": false,
              "required": [
                "messages"
              ]
            }
          }
        },
        "description": "Retrieve messages from the topic. This resource provides the option to retrieve all messages within the topic or, by including parameters in the request body, to fetch messages after a specified ID or timestamp."
      }
    },
    "/pubsub/topics/{topic_id}/publish": {
      "post": {
        "tags": [
          "pubsub"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_pubsub_topics_topic_id_publish",
        "summary": "Publish message to the topic",
        "parameters": [
          {
            "name": "topic_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Topic ID"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "408": {
            "description": "Timeout"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "message_id": {
                  "type": "string",
                  "required": true,
                  "description": "Message ID"
                }
              },
              "additionalProperties": false,
              "required": [
                "message_id"
              ]
            }
          }
        },
        "description": "Publish a message to a topic. The message must comply with the topic schema."
      }
    },
    "/api_access_profiles": {
      "get": {
        "tags": [
          "api_access_profiles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_api_access_profiles",
        "summary": "List access profiles belonging to an API client",
        "parameters": [
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Choose the page of access profiles to return. The starting page is 1. Defaults to 1."
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Number of access profiles returned in a single page. Defaults to 100. Max is 100."
          },
          {
            "name": "api_client_id",
            "type": "number",
            "in": "query",
            "description": "Provide an API client ID to retrieve access profiles belonging to a specific API client."
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/get_api_access_profiles_fields"
              }
            }
          }
        },
        "description": "List all access profiles belonging to an API client"
      },
      "post": {
        "tags": [
          "api_access_profiles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_api_access_profiles",
        "summary": "Create an access profile belonging to an API client",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "api_client_id": {
                  "type": "string",
                  "description": "ID of the API client"
                },
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Name of the access profile"
                },
                "api_collection_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "required": true,
                  "description": "IDs of collections to add to the access profile"
                },
                "auth_type": {
                  "type": "string",
                  "required": true,
                  "description": "Authentication method to validate requests. Available types are: token, jwt, oauth2 and oidc."
                },
                "jwt_method": {
                  "type": "string",
                  "description": "The JWT signing method. If the auth_type is jwt, this is required. Available methods are hmac and rsa for HMAC and RSA respectively."
                },
                "jwt_secret": {
                  "type": "string",
                  "description": "Based on the method, specify the HMAC shared secret or the RSA public key"
                },
                "oidc_issuer": {
                  "type": "string",
                  "description": "Discovery URL of identity provider or OIDC service. Provide only one of this or oidc_jwks_uri, not both. Only applicable if auth_type is jwt or oidc."
                },
                "oidc_jwks_uri": {
                  "type": "string",
                  "description": "JWKS URL of identity provider or OIDC service. Provide only one of this or oidc_issuer, not both. Only applicable if auth_type is jwt or oidc."
                },
                "access_profile_claim": {
                  "type": "string",
                  "description": "If you wish to use a custom claim to identify this access profile, provide the JWT claim key here. Only applicable if auth_type is jwt or oidc."
                },
                "required_claims": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Provide a list of claims that you wish to enforce. Only applicable if auth_type is jwt or oidc."
                },
                "allowed_issuers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Provide a list of issuers (represented by the 'iss' value in JWT claims) that you wish to allow. If the 'iss' claim is enforced in 'required_claims', leave this field blank to accept any 'iss' value. This parameter is only applicable when 'auth_type' is set to 'jwt' or 'oidc'."
                },
                "ip_allow_list": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of IP addresses to be allowlisted"
                },
                "active": {
                  "type": "string",
                  "enum": [
                    true,
                    false,
                    "true",
                    "false"
                  ],
                  "description": "Whether the access profile is disabled or enabled. A client with a disabled access profile cannot call any APIs."
                }
              },
              "additionalProperties": false,
              "required": [
                "name",
                "api_collection_ids",
                "auth_type"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "required": true,
                  "description": "ID of the access profile"
                },
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Name of the access profile"
                },
                "api_client_id": {
                  "type": "number",
                  "required": true,
                  "description": "ID of the API client to which this access profile belongs to"
                },
                "api_collection_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "required": true,
                  "description": "IDs of the API collections that are accessible by this access profile"
                },
                "active": {
                  "type": "boolean",
                  "required": true,
                  "description": "Returns whether the access profile is disabled or enabled"
                },
                "auth_type": {
                  "type": "string",
                  "required": true,
                  "description": "Authentication method used in the access profile. Returns one of token, jwt, oauth2 and oidc."
                },
                "jwt_method": {
                  "type": "string",
                  "required": true,
                  "description": "The JWT signing method. Available methods are hmac and rsa for HMAC and RSA respectively. Only applicable if the auth_type is jwt."
                },
                "jwt_secret": {
                  "type": "string",
                  "required": true,
                  "description": "Based on the method, specify the HMAC shared secret or the RSA public key"
                },
                "oidc_issuer": {
                  "type": "string",
                  "required": true,
                  "description": "Discovery URL of identity provider or OIDC service. Provide only one of this or oidc_jwks_uri, not both. Only applicable if auth_type is jwt or oidc."
                },
                "oidc_jwks_uri": {
                  "type": "string",
                  "required": true,
                  "description": "JWKS URL of identity provider or OIDC service. Provide only one of this or oidc_issuer, not both. Only applicable if auth_type is jwt or oidc."
                },
                "access_profile_claim": {
                  "type": "string",
                  "required": true,
                  "description": "If you wish to use a custom claim to identify this access profile, provide the JWT claim key here. Only applicable if auth_type is jwt or oidc."
                },
                "required_claims": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "required": true,
                  "description": "Provide a list of claims that you wish to enforce. Only applicable if auth_type is jwt or oidc."
                },
                "allowed_issuers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "required": true,
                  "description": "Provide a list of issuers (represented by the 'iss' value in JWT claims) that you wish to allow. If the 'iss' claim is enforced in 'required_claims', leave this field blank to accept any 'iss' value. This parameter is only applicable when 'auth_type' is set to 'jwt' or 'oidc'."
                },
                "ip_allow_list": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "required": true,
                  "description": "List of IP addresses to be allowlisted"
                },
                "created_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                },
                "updated_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                }
              },
              "additionalProperties": false,
              "required": [
                "id",
                "name",
                "api_client_id",
                "api_collection_ids",
                "active",
                "auth_type",
                "jwt_method",
                "jwt_secret",
                "oidc_issuer",
                "oidc_jwks_uri",
                "access_profile_claim",
                "required_claims",
                "allowed_issuers",
                "ip_allow_list",
                "created_at",
                "updated_at"
              ]
            }
          }
        },
        "description": "    Create an access profile belonging to an API client. To use this endpoint, the account must contain at least 1 API collection to assign to the access profile.\n    The response returned depends on the auth type chosen (Auth token, JSON web token or OAuth 2.0).\n\n    1. Auth token authorization will return the auth token in the secret response\n    2. JWT token has 2 signing methods: HMAC and RSA. Depending on the chosen method, the respective secret or public is required in the payload\n    3. OAuth 2.0 authorization will return the client ID and secret in oauth_client_id and oauth_client secret\n"
      }
    },
    "/api_access_profiles/{api_access_profile_id}": {
      "put": {
        "tags": [
          "api_access_profiles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_api_access_profiles_api_access_profile_id",
        "summary": "Update an access profile belonging to an API client",
        "parameters": [
          {
            "name": "api_access_profile_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "API access profile ID"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the access profile"
                },
                "api_collection_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "description": "IDs of collections to add to the access profile"
                },
                "auth_type": {
                  "type": "string",
                  "description": "Authentication method to validate requests. Available types are: token, jwt, oauth2 and oidc."
                },
                "jwt_method": {
                  "type": "string",
                  "description": "The JWT signing method. If the auth_type is jwt, this is required. Available methods are hmac and rsa for HMAC and RSA respectively."
                },
                "jwt_secret": {
                  "type": "string",
                  "description": "Based on the method, specify the HMAC shared secret or the RSA public key"
                },
                "oidc_issuer": {
                  "type": "string",
                  "description": "Discovery URL of identity provider or OIDC service. Provide only one of this or oidc_jwks_uri, not both. Only applicable if auth_type is jwt or oidc."
                },
                "oidc_jwks_uri": {
                  "type": "string",
                  "description": "JWKS URL of identity provider or OIDC service. Provide only one of this or oidc_issuer, not both. Only applicable if auth_type is jwt or oidc."
                },
                "access_profile_claim": {
                  "type": "string",
                  "description": "If you wish to use a custom claim to identify this access profile, provide the JWT claim key here. Only applicable if auth_type is jwt or oidc."
                },
                "required_claims": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Provide a list of claims that you wish to enforce. Only applicable if auth_type is jwt or oidc."
                },
                "allowed_issuers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Provide a list of issuers (represented by the 'iss' value in JWT claims) that you wish to allow. If the 'iss' claim is enforced in 'required_claims', leave this field blank to accept any 'iss' value. This parameter is only applicable when 'auth_type' is set to 'jwt' or 'oidc'."
                },
                "ip_allow_list": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of IP addresses to be allowlisted"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "required": true,
                  "description": "ID of the access profile"
                },
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Name of the access profile"
                },
                "api_client_id": {
                  "type": "number",
                  "required": true,
                  "description": "ID of the API client to which this access profile belongs to"
                },
                "api_collection_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "required": true,
                  "description": "IDs of the API collections that are accessible by this access profile"
                },
                "active": {
                  "type": "boolean",
                  "required": true,
                  "description": "Returns whether the access profile is disabled or enabled"
                },
                "auth_type": {
                  "type": "string",
                  "required": true,
                  "description": "Authentication method used in the access profile. Returns one of token, jwt, oauth2 and oidc."
                },
                "jwt_method": {
                  "type": "string",
                  "required": true,
                  "description": "The JWT signing method. Available methods are hmac and rsa for HMAC and RSA respectively. Only applicable if the auth_type is jwt."
                },
                "jwt_secret": {
                  "type": "string",
                  "required": true,
                  "description": "Based on the method, specify the HMAC shared secret or the RSA public key"
                },
                "oidc_issuer": {
                  "type": "string",
                  "required": true,
                  "description": "Discovery URL of identity provider or OIDC service. Provide only one of this or oidc_jwks_uri, not both. Only applicable if auth_type is jwt or oidc."
                },
                "oidc_jwks_uri": {
                  "type": "string",
                  "required": true,
                  "description": "JWKS URL of identity provider or OIDC service. Provide only one of this or oidc_issuer, not both. Only applicable if auth_type is jwt or oidc."
                },
                "access_profile_claim": {
                  "type": "string",
                  "required": true,
                  "description": "If you wish to use a custom claim to identify this access profile, provide the JWT claim key here. Only applicable if auth_type is jwt or oidc."
                },
                "required_claims": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "required": true,
                  "description": "Provide a list of claims that you wish to enforce. Only applicable if auth_type is jwt or oidc."
                },
                "allowed_issuers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "required": true,
                  "description": "Provide a list of issuers (represented by the 'iss' value in JWT claims) that you wish to allow. If the 'iss' claim is enforced in 'required_claims', leave this field blank to accept any 'iss' value. This parameter is only applicable when 'auth_type' is set to 'jwt' or 'oidc'."
                },
                "ip_allow_list": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "required": true,
                  "description": "List of IP addresses to be allowlisted"
                },
                "created_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                },
                "updated_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                }
              },
              "additionalProperties": false,
              "required": [
                "id",
                "name",
                "api_client_id",
                "api_collection_ids",
                "active",
                "auth_type",
                "jwt_method",
                "jwt_secret",
                "oidc_issuer",
                "oidc_jwks_uri",
                "access_profile_claim",
                "required_claims",
                "allowed_issuers",
                "ip_allow_list",
                "created_at",
                "updated_at"
              ]
            }
          }
        },
        "description": "    Update an access profile belonging to an API client.\n\n    The response returned depends on the auth type chosen (Auth token, JSON web token or OAuth 2.0).\n\n    1. Auth token authorization will return the auth token in the secret response\n    2. JWT token has 2 signing methods: HMAC and RSA. Depending on the chosen method, the respective secret or public is required in the payload\n    3. OAuth 2.0 authorization will return the client ID and secret in oauth_client_id and oauth_client secret\n"
      }
    },
    "/api_access_profiles/{api_access_profile_id}/enable": {
      "put": {
        "tags": [
          "api_access_profiles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_api_access_profiles_api_access_profile_id_enable",
        "summary": "Enable an access profile",
        "parameters": [
          {
            "name": "api_access_profile_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "API access profile ID"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "string",
                  "required": true,
                  "description": "Always returns success upon successful operation"
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Enable an access profile belonging to an API client. Enabling an access profile will allow API calls to be accepted with the enabled profile."
      }
    },
    "/api_access_profiles/{api_access_profile_id}/disable": {
      "put": {
        "tags": [
          "api_access_profiles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_api_access_profiles_api_access_profile_id_disable",
        "summary": "Disable an access profile",
        "parameters": [
          {
            "name": "api_access_profile_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "API access profile ID"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "string",
                  "required": true,
                  "description": "Always returns success upon successful operation"
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Disable an access profile belonging to an API client. Disabling an access profile will stop allowing API calls to be accepted with the access profile."
      }
    },
    "/api_access_profiles/{api_access_profile_id}/refresh_secret": {
      "put": {
        "tags": [
          "api_access_profiles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_api_access_profiles_api_access_profile_id_refresh_secret",
        "summary": "Refresh token secret or oauth client secret",
        "parameters": [
          {
            "name": "api_access_profile_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "API access profile ID"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "required": true,
                  "description": "ID of the access profile"
                },
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Name of the access profile"
                },
                "api_client_id": {
                  "type": "number",
                  "required": true,
                  "description": "ID of the API client to which this access profile belongs to"
                },
                "api_collection_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "required": true,
                  "description": "IDs of the API collections that are accessible by this access profile"
                },
                "active": {
                  "type": "boolean",
                  "required": true,
                  "description": "Returns whether the access profile is disabled or enabled"
                },
                "auth_type": {
                  "type": "string",
                  "required": true,
                  "description": "Authentication method used in the access profile. Returns one of token, jwt, oauth2 and oidc."
                },
                "jwt_method": {
                  "type": "string",
                  "required": true,
                  "description": "The JWT signing method. Available methods are hmac and rsa for HMAC and RSA respectively. Only applicable if the auth_type is jwt."
                },
                "jwt_secret": {
                  "type": "string",
                  "required": true,
                  "description": "Based on the method, specify the HMAC shared secret or the RSA public key"
                },
                "oidc_issuer": {
                  "type": "string",
                  "required": true,
                  "description": "Discovery URL of identity provider or OIDC service. Provide only one of this or oidc_jwks_uri, not both. Only applicable if auth_type is jwt or oidc."
                },
                "oidc_jwks_uri": {
                  "type": "string",
                  "required": true,
                  "description": "JWKS URL of identity provider or OIDC service. Provide only one of this or oidc_issuer, not both. Only applicable if auth_type is jwt or oidc."
                },
                "access_profile_claim": {
                  "type": "string",
                  "required": true,
                  "description": "If you wish to use a custom claim to identify this access profile, provide the JWT claim key here. Only applicable if auth_type is jwt or oidc."
                },
                "required_claims": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "required": true,
                  "description": "Provide a list of claims that you wish to enforce. Only applicable if auth_type is jwt or oidc."
                },
                "allowed_issuers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "required": true,
                  "description": "Provide a list of issuers (represented by the 'iss' value in JWT claims) that you wish to allow. If the 'iss' claim is enforced in 'required_claims', leave this field blank to accept any 'iss' value. This parameter is only applicable when 'auth_type' is set to 'jwt' or 'oidc'."
                },
                "ip_allow_list": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "required": true,
                  "description": "List of IP addresses to be allowlisted"
                },
                "created_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                },
                "updated_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                }
              },
              "additionalProperties": false,
              "required": [
                "id",
                "name",
                "api_client_id",
                "api_collection_ids",
                "active",
                "auth_type",
                "jwt_method",
                "jwt_secret",
                "oidc_issuer",
                "oidc_jwks_uri",
                "access_profile_claim",
                "required_claims",
                "allowed_issuers",
                "ip_allow_list",
                "created_at",
                "updated_at"
              ]
            }
          }
        },
        "description": "    Refreshes the auth token or OAuth 2.0 client secret. This endpoint will fail if the authorization type on the access profile is JWT.\n\n    The response returned depends on the authorization type of the access profile (Auth token or OAuth 2.0).\n\n    1. Auth token authorization will return a new auth token in the secret response\n    2. OAuth 2.0 authorization will return a new client ID and secret in oauth_client_id and oauth_client secret\n"
      }
    },
    "/export_manifests": {
      "post": {
        "tags": [
          "export_manifests"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_export_manifests",
        "summary": "create export manifest for current user",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "export_manifest": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "required": true,
                      "description": "Name of manifest"
                    },
                    "folder_id": {
                      "type": "number",
                      "description": "Folder ID. If absent defaults to root folder when creating a manifest"
                    },
                    "assets": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Array of assets"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "name"
                  ]
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/operation_result"
            }
          },
          "404": {
            "description": "Manifest not found"
          },
          "500": {
            "description": "Server error"
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/export_manifest_response"
            }
          }
        },
        "description": ""
      }
    },
    "/export_manifests/{id}": {
      "get": {
        "tags": [
          "export_manifests"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_export_manifests_id",
        "summary": "view manifest",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Manifest ID"
          },
          {
            "name": "include_diff",
            "type": "boolean",
            "in": "query",
            "description": "Should diff be included"
          },
          {
            "name": "include_assets",
            "type": "boolean",
            "in": "query",
            "description": "Should show assets"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Manifest not found"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/export_manifest_response"
            }
          }
        },
        "description": ""
      },
      "put": {
        "tags": [
          "export_manifests"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_export_manifests_id",
        "summary": "update existing manifest",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Manifest ID"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "export_manifest": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "required": true,
                      "description": "Name of manifest"
                    },
                    "folder_id": {
                      "type": "number",
                      "description": "Folder ID. If absent defaults to root folder when creating a manifest"
                    },
                    "assets": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Array of assets"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "name"
                  ]
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Error updating manifest",
            "schema": {
              "$ref": "#/definitions/operation_result"
            }
          },
          "404": {
            "description": "Manifest not found"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/export_manifest_response"
            }
          }
        },
        "description": ""
      },
      "delete": {
        "tags": [
          "export_manifests"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "delete_export_manifests_id",
        "summary": "delete manifest",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Manifest ID"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/operation_result"
            }
          },
          "404": {
            "description": "Manifest not found"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/operation_result"
            }
          }
        },
        "description": ""
      }
    },
    "/on_prem_groups": {
      "get": {
        "tags": [
          "secure_gateway_tunnels"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_on_prem_groups",
        "summary": "List On-prem Groups",
        "parameters": [

        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/secure_gateway_tunnel_fields"
              }
            }
          }
        },
        "description": "List all On-prem groups in your workspace"
      },
      "post": {
        "tags": [
          "secure_gateway_tunnels"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_on_prem_groups",
        "summary": "Create On-prem Group",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "On-prem group name"
                }
              },
              "additionalProperties": false,
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/secure_gateway_tunnel_fields"
            }
          }
        },
        "description": "Create an On-prem group"
      }
    },
    "/on_prem_groups/{id}/agents": {
      "get": {
        "tags": [
          "secure_gateway_tunnels"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_on_prem_groups_id_agents",
        "summary": "List all On-prem agents within On-prem group",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "On-prem group ID"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/on_prem_agent_fields"
              }
            }
          }
        },
        "description": "List all On-prem agents within On-prem group in your workspace"
      }
    },
    "/on_prem_groups/{id}": {
      "get": {
        "tags": [
          "secure_gateway_tunnels"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_on_prem_groups_id",
        "summary": "Get On-prem Group details",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "On-prem group ID"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/secure_gateway_tunnel_fields"
            }
          }
        },
        "description": "Get details about an On-prem group"
      },
      "put": {
        "tags": [
          "secure_gateway_tunnels"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_on_prem_groups_id",
        "summary": "Update On-prem Group",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "On-prem group ID"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "On-prem group name"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/secure_gateway_tunnel_fields"
            }
          }
        },
        "description": "Update an On-prem group"
      },
      "delete": {
        "tags": [
          "secure_gateway_tunnels"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "delete_on_prem_groups_id",
        "summary": "Delete On-prem Group",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "On-prem agent ID"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "required": true,
                  "description": "Always returns 'true' on success"
                }
              },
              "additionalProperties": false,
              "required": [
                "success"
              ]
            }
          }
        },
        "description": "Delete an On-prem group. All on-prem agents in this group will be deleted."
      }
    },
    "/on_prem_groups/{id}/status": {
      "get": {
        "tags": [
          "secure_gateway_tunnels"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_on_prem_groups_id_status",
        "summary": "Get On-prem Group status",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "On-prem group ID"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "agent_count": {
                  "type": "number",
                  "required": true,
                  "description": "Number of On-prem agents associated with this On-prem group"
                },
                "active_agent_count": {
                  "type": "number",
                  "required": true,
                  "description": "Number of active On-prem agents"
                },
                "profiles": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "required": true,
                        "description": "Profile name"
                      },
                      "provider": {
                        "type": "string",
                        "required": true,
                        "description": "Profile connection provider"
                      },
                      "type": {
                        "type": "string",
                        "required": true,
                        "description": "Profile connection type"
                      },
                      "connections": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "number",
                              "required": true,
                              "description": "Connection ID"
                            },
                            "name": {
                              "type": "string",
                              "required": true,
                              "description": "Connection name"
                            }
                          },
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "name"
                          ]
                        }
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "name",
                      "provider",
                      "type",
                      "connections"
                    ]
                  }
                }
              },
              "additionalProperties": false,
              "required": [
                "agent_count",
                "active_agent_count",
                "profiles"
              ]
            }
          }
        },
        "description": "Get the status of an On-prem group"
      }
    },
    "/custom_oauth_profiles": {
      "get": {
        "tags": [
          "custom_oauth_profiles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_custom_oauth_profiles",
        "summary": "List Custom OAuth profiles",
        "parameters": [
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Page number of the custom OAuth profiles to fetch. Defaults to 1."
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Number of custom OAuth profiles to return in a single page. Defaults to 100. Max is 100."
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "required": true,
                        "description": "ID of the custom OAuth profile"
                      },
                      "user_id": {
                        "type": "number",
                        "required": true,
                        "description": "ID of the workspace in which the custom OAuth profile exists"
                      },
                      "name": {
                        "type": "string",
                        "required": true,
                        "description": "Name of the custom OAuth profile"
                      },
                      "provider": {
                        "type": "string",
                        "required": true,
                        "description": "Name of the app tied to this custom OAuth profile"
                      },
                      "shared_accounts_count": {
                        "type": "number",
                        "required": true,
                        "description": "Number of connections using this custom OAuth profile"
                      },
                      "created_at": {
                        "type": "string",
                        "required": true,
                        "description": "Timestamp in ISO 8601 format"
                      },
                      "updated_at": {
                        "type": "string",
                        "required": true,
                        "description": "Timestamp in ISO 8601 format"
                      },
                      "oem_customers_count": {
                        "type": "number",
                        "required": true,
                        "description": "Number of OEM customers using this custom OAuth profile in their connections"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "client_id": {
                            "type": "string",
                            "required": true,
                            "description": "Client ID of the Custom OAuth App"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "client_id"
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "id",
                      "user_id",
                      "name",
                      "provider",
                      "shared_accounts_count",
                      "created_at",
                      "updated_at",
                      "oem_customers_count",
                      "data"
                    ]
                  }
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "List custom OAuth profiles. Client secrets and tokens are never returned in the response."
      },
      "post": {
        "tags": [
          "custom_oauth_profiles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_custom_oauth_profiles",
        "summary": "Create a Custom OAuth profile",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Name of the custom OAuth profile"
                },
                "provider": {
                  "type": "string",
                  "required": true,
                  "description": "Name of the app tied to this custom OAuth profile"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "client_id": {
                      "type": "string",
                      "required": true,
                      "description": "The Client ID of the Custom OAuth App"
                    },
                    "client_secret": {
                      "type": "string",
                      "required": true,
                      "description": "The Client secret of the Custom OAuth App"
                    },
                    "token": {
                      "type": "string",
                      "description": "Only required for Slack Apps. The token of the Custom OAuth App"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "client_id",
                    "client_secret"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "name",
                "provider",
                "data"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "201": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "required": true,
                      "description": "ID of the custom OAuth profile"
                    },
                    "user_id": {
                      "type": "number",
                      "required": true,
                      "description": "ID of the workspace in which the custom OAuth profile exists"
                    },
                    "name": {
                      "type": "string",
                      "required": true,
                      "description": "Name of the custom OAuth profile"
                    },
                    "provider": {
                      "type": "string",
                      "required": true,
                      "description": "Name of the app tied to this custom OAuth profile"
                    },
                    "shared_accounts_count": {
                      "type": "number",
                      "required": true,
                      "description": "Number of connections using this custom OAuth profile"
                    },
                    "created_at": {
                      "type": "string",
                      "required": true,
                      "description": "Timestamp in ISO 8601 format"
                    },
                    "updated_at": {
                      "type": "string",
                      "required": true,
                      "description": "Timestamp in ISO 8601 format"
                    },
                    "oem_customers_count": {
                      "type": "number",
                      "required": true,
                      "description": "Number of OEM customers using this custom OAuth profile in their connections"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "client_id": {
                          "type": "string",
                          "required": true,
                          "description": "Client ID of the Custom OAuth App"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "client_id"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "user_id",
                    "name",
                    "provider",
                    "shared_accounts_count",
                    "created_at",
                    "updated_at",
                    "oem_customers_count",
                    "data"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Create a custom OAuth profile"
      }
    },
    "/custom_oauth_profiles/{id}": {
      "get": {
        "tags": [
          "custom_oauth_profiles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_custom_oauth_profiles_id",
        "summary": "Get Custom OAuth profile by ID",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "ID of the custom OAuth profile to retrieve"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "required": true,
                      "description": "ID of the custom OAuth profile"
                    },
                    "user_id": {
                      "type": "number",
                      "required": true,
                      "description": "ID of the workspace in which the custom OAuth profile exists"
                    },
                    "name": {
                      "type": "string",
                      "required": true,
                      "description": "Name of the custom OAuth profile"
                    },
                    "provider": {
                      "type": "string",
                      "required": true,
                      "description": "Name of the app tied to this custom OAuth profile"
                    },
                    "shared_accounts_count": {
                      "type": "number",
                      "required": true,
                      "description": "Number of connections using this custom OAuth profile"
                    },
                    "created_at": {
                      "type": "string",
                      "required": true,
                      "description": "Timestamp in ISO 8601 format"
                    },
                    "updated_at": {
                      "type": "string",
                      "required": true,
                      "description": "Timestamp in ISO 8601 format"
                    },
                    "oem_customers_count": {
                      "type": "number",
                      "required": true,
                      "description": "Number of OEM customers using this custom OAuth profile in their connections"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "client_id": {
                          "type": "string",
                          "required": true,
                          "description": "Client ID of the Custom OAuth App"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "client_id"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "user_id",
                    "name",
                    "provider",
                    "shared_accounts_count",
                    "created_at",
                    "updated_at",
                    "oem_customers_count",
                    "data"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Retrieves a custom OAuth profile by ID. Client secrets and tokens are never returned in the response."
      },
      "put": {
        "tags": [
          "custom_oauth_profiles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_custom_oauth_profiles_id",
        "summary": "Update a Custom OAuth profile",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "ID of the custom OAuth profile to update"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the custom OAuth profile"
                },
                "provider": {
                  "type": "string",
                  "description": "Name of the app tied to this custom OAuth profile"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "client_id": {
                      "type": "string",
                      "description": "The Client ID of the Custom OAuth App"
                    },
                    "client_secret": {
                      "type": "string",
                      "description": "The Client secret of the Custom OAuth App"
                    },
                    "token": {
                      "type": "string",
                      "description": "Only required for Slack Apps. The token of the Custom OAuth App"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "required": true,
                      "description": "ID of the custom OAuth profile"
                    },
                    "user_id": {
                      "type": "number",
                      "required": true,
                      "description": "ID of the workspace in which the custom OAuth profile exists"
                    },
                    "name": {
                      "type": "string",
                      "required": true,
                      "description": "Name of the custom OAuth profile"
                    },
                    "provider": {
                      "type": "string",
                      "required": true,
                      "description": "Name of the app tied to this custom OAuth profile"
                    },
                    "shared_accounts_count": {
                      "type": "number",
                      "required": true,
                      "description": "Number of connections using this custom OAuth profile"
                    },
                    "created_at": {
                      "type": "string",
                      "required": true,
                      "description": "Timestamp in ISO 8601 format"
                    },
                    "updated_at": {
                      "type": "string",
                      "required": true,
                      "description": "Timestamp in ISO 8601 format"
                    },
                    "oem_customers_count": {
                      "type": "number",
                      "required": true,
                      "description": "Number of OEM customers using this custom OAuth profile in their connections"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "client_id": {
                          "type": "string",
                          "required": true,
                          "description": "Client ID of the Custom OAuth App"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "client_id"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "user_id",
                    "name",
                    "provider",
                    "shared_accounts_count",
                    "created_at",
                    "updated_at",
                    "oem_customers_count",
                    "data"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Update a custom OAuth profile"
      },
      "delete": {
        "tags": [
          "custom_oauth_profiles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "delete_custom_oauth_profiles_id",
        "summary": "Delete a custom OAuth profile",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "ID of the custom OAuth profile to delete"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "force": {
                  "type": "string",
                  "enum": [
                    "true",
                    "false"
                  ],
                  "description": "When 'true' delete the custom OAuth profile even if it is used. Defaults to 'false'."
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "required": true,
                      "description": "Status of the delete operation"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "success"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Update a custom OAuth profile"
      }
    },
    "/managed_users/{managed_user_id}/api_collections": {
      "get": {
        "tags": [
          "oem_api_groups"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_managed_users_managed_user_id_api_collections",
        "summary": "List API collections",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Number of API collections to return in a single page. Defaults to 100. Max is 100."
          },
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Page number of the API collections to fetch. Defaults to 1."
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/api_collection_fields"
              }
            }
          }
        },
        "description": "List all API collections. The endpoint returns the project_id of the project to which the collections belong in the response."
      },
      "post": {
        "tags": [
          "oem_api_groups"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_managed_users_managed_user_id_api_collections",
        "summary": "Create an API collection",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Name of the collection"
                },
                "project_id": {
                  "type": "string",
                  "description": "The ID of a specific project. Retrieve a list of project IDs using the list projects endpoint."
                }
              },
              "additionalProperties": false,
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/api_collection_fields"
              }
            }
          }
        },
        "description": "Create an API collection within a project you specify"
      }
    },
    "/managed_users/{managed_user_id}/folders": {
      "get": {
        "tags": [
          "oem_folders"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_managed_users_managed_user_id_folders",
        "summary": "List folders",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "parent_id",
            "type": "number",
            "in": "query",
            "description": "Parent folder ID. Defaults to Home folder."
          },
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Page number of the folders to fetch. Defaults to 1."
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Number of folders to return in a single page. Defaults to 100. Max is 100."
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/folder_fields"
              }
            }
          }
        },
        "description": "Lists all folders"
      },
      "post": {
        "tags": [
          "oem_folders"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_managed_users_managed_user_id_folders",
        "summary": "Create a folder",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Folder name"
                },
                "parent_id": {
                  "type": "number",
                  "description": "Parent folder ID. Defaults to Home folder."
                }
              },
              "additionalProperties": false,
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/folder_fields"
            }
          }
        },
        "description": "Creates a new folder in the specified parent folder. If no parent folder ID is specified, the folder created will be a top level folder (in the Home folder)."
      }
    },
    "/managed_users/{managed_user_id}/lookup_tables/{lookup_table_id}/rows/{row_id}": {
      "get": {
        "tags": [
          "oem_folders"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_managed_users_managed_user_id_lookup_tables_lookup_table_id_rows_row_id",
        "summary": "Get a row",
        "parameters": [
          {
            "name": "lookup_table_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Lookup table ID"
          },
          {
            "name": "row_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Lookup table row ID"
          },
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/lookup_table_row_fields"
            }
          }
        },
        "description": "Get a row from the lookup table"
      },
      "put": {
        "tags": [
          "oem_folders"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_managed_users_managed_user_id_lookup_tables_lookup_table_id_rows_row_id",
        "summary": "Update a row",
        "parameters": [
          {
            "name": "lookup_table_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Lookup table ID"
          },
          {
            "name": "row_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Lookup table row ID"
          },
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "additionalProperties": true,
                  "required": true,
                  "description": "The hash containing the data for the updated row in the form of column_name:value pairs. For example, { \"name\": \"United States\", \"code\": \"USA\" }. Only the columns provided are updated."
                }
              },
              "additionalProperties": false,
              "required": [
                "data"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply. Also returns an error message on failures in this format { \"error\": \"error_message\" }",
            "schema": {
              "$ref": "#/definitions/lookup_table_row_fields"
            }
          }
        },
        "description": "Updates a row in the lookup table"
      },
      "delete": {
        "tags": [
          "oem_folders"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "delete_managed_users_managed_user_id_lookup_tables_lookup_table_id_rows_row_id",
        "summary": "Delete a row",
        "parameters": [
          {
            "name": "lookup_table_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Lookup table ID"
          },
          {
            "name": "row_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Lookup table row ID"
          },
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply. Also returns an error message on failures in this format { \"error\": \"error_message\" }",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "required": true,
                  "description": "Always returns 'true' on success"
                }
              },
              "additionalProperties": false,
              "required": [
                "success"
              ]
            }
          }
        },
        "description": "Delete a row from the lookup table"
      }
    },
    "/managed_users/{managed_user_id}/lookup_tables/{lookup_table_id}/rows": {
      "post": {
        "tags": [
          "oem_folders"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_managed_users_managed_user_id_lookup_tables_lookup_table_id_rows",
        "summary": "Add a row",
        "parameters": [
          {
            "name": "lookup_table_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Lookup table ID"
          },
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "additionalProperties": true,
                  "required": true,
                  "description": "The hash containing the data for the new row in the form of column_name:value pairs. For example, { \"name\": \"United States\", \"code\": \"USA\" }"
                }
              },
              "additionalProperties": false,
              "required": [
                "data"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply. Also returns an error message on failures in this format { \"error\": \"error_message\" }",
            "schema": {
              "$ref": "#/definitions/lookup_table_row_fields"
            }
          }
        },
        "description": "Adds a row to the lookup table"
      },
      "get": {
        "tags": [
          "oem_folders"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_managed_users_managed_user_id_lookup_tables_lookup_table_id_rows",
        "summary": "List rows",
        "parameters": [
          {
            "name": "lookup_table_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Lookup table ID"
          },
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Page number of the lookup table rows to fetch. Defaults to 1."
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Number of API clients to return in a single page. Defaults to 500. Max is 1000."
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply. Also returns an error message on failures in this format { \"error\": \"error_message\" }",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/lookup_table_row_fields"
              }
            }
          }
        },
        "description": "Returns a lists of rows from the lookup table. Supports filtering and pagination."
      }
    },
    "/managed_users/{managed_user_id}/lookup_tables/{lookup_table_id}/lookup": {
      "get": {
        "tags": [
          "oem_folders"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_managed_users_managed_user_id_lookup_tables_lookup_table_id_lookup",
        "summary": "Lookup a row",
        "parameters": [
          {
            "name": "lookup_table_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Lookup table ID"
          },
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/lookup_table_row_fields"
            }
          }
        },
        "description": "Finds the first row matching the given criteria in the lookup table. Returns a 404 when the lookup fails."
      }
    },
    "/managed_users/{managed_user_id}/lookup_tables/batch_delete": {
      "post": {
        "tags": [
          "oem_folders"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_managed_users_managed_user_id_lookup_tables_batch_delete",
        "summary": "Delete lookup tables in batch",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "required": true,
                  "description": "Include the ID(s) of the lookup table(s) you plan to delete"
                }
              },
              "additionalProperties": false,
              "required": [
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Details of the delete action",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "deleted": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      },
                      "required": true,
                      "description": "Array of IDs of the deleted lookup tables. Returns an empty array if all the lookup tables are successfully deleted."
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "deleted"
                  ]
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "lookup_table_id": {
                        "type": "number",
                        "required": true,
                        "description": "Lookup table ID"
                      },
                      "error": {
                        "type": "string",
                        "required": true,
                        "description": "Error while deleting the lookup table"
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "lookup_table_id",
                      "error"
                    ]
                  }
                }
              },
              "additionalProperties": false,
              "required": [
                "data",
                "errors"
              ]
            }
          }
        },
        "description": "Use this endpoint to delete lookup tables in batch"
      }
    },
    "/managed_users/{managed_user_id}/folders/{folder_id}": {
      "delete": {
        "tags": [
          "oem_folders"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "delete_managed_users_managed_user_id_folders_folder_id",
        "summary": "Delete a folder",
        "parameters": [
          {
            "name": "folder_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "The ID of the folder you plan to delete"
          },
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "force": {
                  "type": "boolean",
                  "description": "Set this parameter to true to delete a folder that is not empty. When true, the folder you specify using the folder_id parameter, and its contents (all recipes and connections) within the folder are deleted. If set to false, this action can only delete an empty folder."
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "required": true,
                  "description": "Always returns 'true' on success"
                }
              },
              "additionalProperties": false,
              "required": [
                "success"
              ]
            }
          }
        },
        "description": "Delete a folder within your workspace."
      }
    },
    "/managed_users/{managed_user_id}/exports/{package_id}": {
      "get": {
        "tags": [
          "oem_package_exports"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_managed_users_managed_user_id_exports_package_id",
        "summary": "Get export status",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Embedded customer Account ID/External ID. External IDs should be prefixed with 'E' (e.g., 'EA2300') and URL-encoded."
          },
          {
            "name": "package_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "The ID of the package"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "required": true,
                      "description": "Package ID"
                    },
                    "operation_type": {
                      "type": "string",
                      "enum": [
                        "import",
                        "export"
                      ],
                      "required": true,
                      "description": "Operation type: import or export"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "completed",
                        "in_progress",
                        "failed"
                      ],
                      "required": true,
                      "description": "Operation status: completed, in_progress, failed"
                    },
                    "export_manifest_id": {
                      "type": "number",
                      "required": true,
                      "description": "Manifest ID for export operation"
                    },
                    "error": {
                      "type": "string",
                      "required": true,
                      "description": "Error description if export operation failed"
                    },
                    "download_url": {
                      "type": "string",
                      "required": true,
                      "description": "Download URL for the package"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "operation_type",
                    "status",
                    "export_manifest_id",
                    "error",
                    "download_url"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Returns the status of an exported package"
      }
    },
    "/managed_users/{managed_user_id}/exports/{manifest_id}": {
      "post": {
        "tags": [
          "oem_package_exports"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_managed_users_managed_user_id_exports_manifest_id",
        "summary": "Export package",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Embedded customer Account ID/External ID. External IDs should be prefixed with 'E' (e.g., 'EA2300') and URL-encoded."
          },
          {
            "name": "manifest_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "The ID of the manifest you plan to export"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "201": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "required": true,
                      "description": "Package ID"
                    },
                    "operation_type": {
                      "type": "string",
                      "enum": [
                        "import",
                        "export"
                      ],
                      "required": true,
                      "description": "Operation type: import or export"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "completed",
                        "in_progress",
                        "failed"
                      ],
                      "required": true,
                      "description": "Operation status: completed, in_progress, failed"
                    },
                    "export_manifest_id": {
                      "type": "number",
                      "required": true,
                      "description": "Manifest ID for export operation"
                    },
                    "error": {
                      "type": "string",
                      "required": true,
                      "description": "Error description if export operation failed"
                    },
                    "download_url": {
                      "type": "string",
                      "required": true,
                      "description": "Download URL for the package"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "operation_type",
                    "status",
                    "export_manifest_id",
                    "error",
                    "download_url"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Export a package using the manifest ID"
      }
    },
    "/managed_users/{managed_user_id}/api_access_profiles": {
      "get": {
        "tags": [
          "oem_access_profiles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_managed_users_managed_user_id_api_access_profiles",
        "summary": "List access profiles belonging to an API client",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Choose the page of access profiles to return. The starting page is 1. Defaults to 1."
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Number of access profiles returned in a single page. Defaults to 100. Max is 100."
          },
          {
            "name": "api_client_id",
            "type": "number",
            "in": "query",
            "description": "Provide an API client ID to retrieve access profiles belonging to a specific API client."
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/get_api_access_profiles_fields"
              }
            }
          }
        },
        "description": "List all access profiles belonging to an API client"
      },
      "post": {
        "tags": [
          "oem_access_profiles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_managed_users_managed_user_id_api_access_profiles",
        "summary": "Create an access profile belonging to an API client",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "api_client_id": {
                  "type": "string",
                  "description": "ID of the API client"
                },
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Name of the access profile"
                },
                "api_collection_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "required": true,
                  "description": "IDs of collections to add to the access profile"
                },
                "auth_type": {
                  "type": "string",
                  "required": true,
                  "description": "Authentication method to validate requests. Available types are: token, jwt, oauth2 and oidc."
                },
                "jwt_method": {
                  "type": "string",
                  "description": "The JWT signing method. If the auth_type is jwt, this is required. Available methods are hmac and rsa for HMAC and RSA respectively."
                },
                "jwt_secret": {
                  "type": "string",
                  "description": "Based on the method, specify the HMAC shared secret or the RSA public key"
                },
                "oidc_issuer": {
                  "type": "string",
                  "description": "Discovery URL of identity provider or OIDC service. Provide only one of this or oidc_jwks_uri, not both. Only applicable if auth_type is jwt or oidc."
                },
                "oidc_jwks_uri": {
                  "type": "string",
                  "description": "JWKS URL of identity provider or OIDC service. Provide only one of this or oidc_issuer, not both. Only applicable if auth_type is jwt or oidc."
                },
                "access_profile_claim": {
                  "type": "string",
                  "description": "If you wish to use a custom claim to identify this access profile, provide the JWT claim key here. Only applicable if auth_type is jwt or oidc."
                },
                "required_claims": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Provide a list of claims that you wish to enforce. Only applicable if auth_type is jwt or oidc."
                },
                "allowed_issuers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Provide a list of issuers (represented by the 'iss' value in JWT claims) that you wish to allow. If the 'iss' claim is enforced in 'required_claims', leave this field blank to accept any 'iss' value. This parameter is only applicable when 'auth_type' is set to 'jwt' or 'oidc'."
                },
                "ip_allow_list": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of IP addresses to be allowlisted"
                },
                "active": {
                  "type": "string",
                  "enum": [
                    true,
                    false,
                    "true",
                    "false"
                  ],
                  "description": "Whether the access profile is disabled or enabled. A client with a disabled access profile cannot call any APIs."
                }
              },
              "additionalProperties": false,
              "required": [
                "name",
                "api_collection_ids",
                "auth_type"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "required": true,
                  "description": "ID of the access profile"
                },
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Name of the access profile"
                },
                "api_client_id": {
                  "type": "number",
                  "required": true,
                  "description": "ID of the API client to which this access profile belongs to"
                },
                "api_collection_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "required": true,
                  "description": "IDs of the API collections that are accessible by this access profile"
                },
                "active": {
                  "type": "boolean",
                  "required": true,
                  "description": "Returns whether the access profile is disabled or enabled"
                },
                "auth_type": {
                  "type": "string",
                  "required": true,
                  "description": "Authentication method used in the access profile. Returns one of token, jwt, oauth2 and oidc."
                },
                "jwt_method": {
                  "type": "string",
                  "required": true,
                  "description": "The JWT signing method. Available methods are hmac and rsa for HMAC and RSA respectively. Only applicable if the auth_type is jwt."
                },
                "jwt_secret": {
                  "type": "string",
                  "required": true,
                  "description": "Based on the method, specify the HMAC shared secret or the RSA public key"
                },
                "oidc_issuer": {
                  "type": "string",
                  "required": true,
                  "description": "Discovery URL of identity provider or OIDC service. Provide only one of this or oidc_jwks_uri, not both. Only applicable if auth_type is jwt or oidc."
                },
                "oidc_jwks_uri": {
                  "type": "string",
                  "required": true,
                  "description": "JWKS URL of identity provider or OIDC service. Provide only one of this or oidc_issuer, not both. Only applicable if auth_type is jwt or oidc."
                },
                "access_profile_claim": {
                  "type": "string",
                  "required": true,
                  "description": "If you wish to use a custom claim to identify this access profile, provide the JWT claim key here. Only applicable if auth_type is jwt or oidc."
                },
                "required_claims": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "required": true,
                  "description": "Provide a list of claims that you wish to enforce. Only applicable if auth_type is jwt or oidc."
                },
                "allowed_issuers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "required": true,
                  "description": "Provide a list of issuers (represented by the 'iss' value in JWT claims) that you wish to allow. If the 'iss' claim is enforced in 'required_claims', leave this field blank to accept any 'iss' value. This parameter is only applicable when 'auth_type' is set to 'jwt' or 'oidc'."
                },
                "ip_allow_list": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "required": true,
                  "description": "List of IP addresses to be allowlisted"
                },
                "created_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                },
                "updated_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                }
              },
              "additionalProperties": false,
              "required": [
                "id",
                "name",
                "api_client_id",
                "api_collection_ids",
                "active",
                "auth_type",
                "jwt_method",
                "jwt_secret",
                "oidc_issuer",
                "oidc_jwks_uri",
                "access_profile_claim",
                "required_claims",
                "allowed_issuers",
                "ip_allow_list",
                "created_at",
                "updated_at"
              ]
            }
          }
        },
        "description": "    Create an access profile belonging to an API client. To use this endpoint, the account must contain at least 1 API collection to assign to the access profile.\n    The response returned depends on the auth type chosen (Auth token, JSON web token or OAuth 2.0).\n\n    1. Auth token authorization will return the auth token in the secret response\n    2. JWT token has 2 signing methods: HMAC and RSA. Depending on the chosen method, the respective secret or public is required in the payload\n    3. OAuth 2.0 authorization will return the client ID and secret in oauth_client_id and oauth_client secret\n"
      }
    },
    "/managed_users/{managed_user_id}/api_access_profiles/{api_access_profile_id}": {
      "put": {
        "tags": [
          "oem_access_profiles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_managed_users_managed_user_id_api_access_profiles_api_access_profile_id",
        "summary": "Update an access profile belonging to an API client",
        "parameters": [
          {
            "name": "api_access_profile_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "API access profile ID"
          },
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the access profile"
                },
                "api_collection_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "description": "IDs of collections to add to the access profile"
                },
                "auth_type": {
                  "type": "string",
                  "description": "Authentication method to validate requests. Available types are: token, jwt, oauth2 and oidc."
                },
                "jwt_method": {
                  "type": "string",
                  "description": "The JWT signing method. If the auth_type is jwt, this is required. Available methods are hmac and rsa for HMAC and RSA respectively."
                },
                "jwt_secret": {
                  "type": "string",
                  "description": "Based on the method, specify the HMAC shared secret or the RSA public key"
                },
                "oidc_issuer": {
                  "type": "string",
                  "description": "Discovery URL of identity provider or OIDC service. Provide only one of this or oidc_jwks_uri, not both. Only applicable if auth_type is jwt or oidc."
                },
                "oidc_jwks_uri": {
                  "type": "string",
                  "description": "JWKS URL of identity provider or OIDC service. Provide only one of this or oidc_issuer, not both. Only applicable if auth_type is jwt or oidc."
                },
                "access_profile_claim": {
                  "type": "string",
                  "description": "If you wish to use a custom claim to identify this access profile, provide the JWT claim key here. Only applicable if auth_type is jwt or oidc."
                },
                "required_claims": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Provide a list of claims that you wish to enforce. Only applicable if auth_type is jwt or oidc."
                },
                "allowed_issuers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Provide a list of issuers (represented by the 'iss' value in JWT claims) that you wish to allow. If the 'iss' claim is enforced in 'required_claims', leave this field blank to accept any 'iss' value. This parameter is only applicable when 'auth_type' is set to 'jwt' or 'oidc'."
                },
                "ip_allow_list": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of IP addresses to be allowlisted"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "required": true,
                  "description": "ID of the access profile"
                },
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Name of the access profile"
                },
                "api_client_id": {
                  "type": "number",
                  "required": true,
                  "description": "ID of the API client to which this access profile belongs to"
                },
                "api_collection_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "required": true,
                  "description": "IDs of the API collections that are accessible by this access profile"
                },
                "active": {
                  "type": "boolean",
                  "required": true,
                  "description": "Returns whether the access profile is disabled or enabled"
                },
                "auth_type": {
                  "type": "string",
                  "required": true,
                  "description": "Authentication method used in the access profile. Returns one of token, jwt, oauth2 and oidc."
                },
                "jwt_method": {
                  "type": "string",
                  "required": true,
                  "description": "The JWT signing method. Available methods are hmac and rsa for HMAC and RSA respectively. Only applicable if the auth_type is jwt."
                },
                "jwt_secret": {
                  "type": "string",
                  "required": true,
                  "description": "Based on the method, specify the HMAC shared secret or the RSA public key"
                },
                "oidc_issuer": {
                  "type": "string",
                  "required": true,
                  "description": "Discovery URL of identity provider or OIDC service. Provide only one of this or oidc_jwks_uri, not both. Only applicable if auth_type is jwt or oidc."
                },
                "oidc_jwks_uri": {
                  "type": "string",
                  "required": true,
                  "description": "JWKS URL of identity provider or OIDC service. Provide only one of this or oidc_issuer, not both. Only applicable if auth_type is jwt or oidc."
                },
                "access_profile_claim": {
                  "type": "string",
                  "required": true,
                  "description": "If you wish to use a custom claim to identify this access profile, provide the JWT claim key here. Only applicable if auth_type is jwt or oidc."
                },
                "required_claims": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "required": true,
                  "description": "Provide a list of claims that you wish to enforce. Only applicable if auth_type is jwt or oidc."
                },
                "allowed_issuers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "required": true,
                  "description": "Provide a list of issuers (represented by the 'iss' value in JWT claims) that you wish to allow. If the 'iss' claim is enforced in 'required_claims', leave this field blank to accept any 'iss' value. This parameter is only applicable when 'auth_type' is set to 'jwt' or 'oidc'."
                },
                "ip_allow_list": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "required": true,
                  "description": "List of IP addresses to be allowlisted"
                },
                "created_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                },
                "updated_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                }
              },
              "additionalProperties": false,
              "required": [
                "id",
                "name",
                "api_client_id",
                "api_collection_ids",
                "active",
                "auth_type",
                "jwt_method",
                "jwt_secret",
                "oidc_issuer",
                "oidc_jwks_uri",
                "access_profile_claim",
                "required_claims",
                "allowed_issuers",
                "ip_allow_list",
                "created_at",
                "updated_at"
              ]
            }
          }
        },
        "description": "    Update an access profile belonging to an API client.\n\n    The response returned depends on the auth type chosen (Auth token, JSON web token or OAuth 2.0).\n\n    1. Auth token authorization will return the auth token in the secret response\n    2. JWT token has 2 signing methods: HMAC and RSA. Depending on the chosen method, the respective secret or public is required in the payload\n    3. OAuth 2.0 authorization will return the client ID and secret in oauth_client_id and oauth_client secret\n"
      }
    },
    "/managed_users/{managed_user_id}/api_access_profiles/{api_access_profile_id}/enable": {
      "put": {
        "tags": [
          "oem_access_profiles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_managed_users_managed_user_id_api_access_profiles_api_access_profile_id_enable",
        "summary": "Enable an access profile",
        "parameters": [
          {
            "name": "api_access_profile_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "API access profile ID"
          },
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "string",
                  "required": true,
                  "description": "Always returns success upon successful operation"
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Enable an access profile belonging to an API client. Enabling an access profile will allow API calls to be accepted with the enabled profile."
      }
    },
    "/managed_users/{managed_user_id}/api_access_profiles/{api_access_profile_id}/disable": {
      "put": {
        "tags": [
          "oem_access_profiles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_managed_users_managed_user_id_api_access_profiles_api_access_profile_id_disable",
        "summary": "Disable an access profile",
        "parameters": [
          {
            "name": "api_access_profile_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "API access profile ID"
          },
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "string",
                  "required": true,
                  "description": "Always returns success upon successful operation"
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Disable an access profile belonging to an API client. Disabling an access profile will stop allowing API calls to be accepted with the access profile."
      }
    },
    "/managed_users/{managed_user_id}/api_access_profiles/{api_access_profile_id}/refresh_secret": {
      "put": {
        "tags": [
          "oem_access_profiles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_managed_users_managed_user_id_api_access_profiles_api_access_profile_id_refresh_secret",
        "summary": "Refresh token secret or oauth client secret",
        "parameters": [
          {
            "name": "api_access_profile_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "API access profile ID"
          },
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "required": true,
                  "description": "ID of the access profile"
                },
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Name of the access profile"
                },
                "api_client_id": {
                  "type": "number",
                  "required": true,
                  "description": "ID of the API client to which this access profile belongs to"
                },
                "api_collection_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "required": true,
                  "description": "IDs of the API collections that are accessible by this access profile"
                },
                "active": {
                  "type": "boolean",
                  "required": true,
                  "description": "Returns whether the access profile is disabled or enabled"
                },
                "auth_type": {
                  "type": "string",
                  "required": true,
                  "description": "Authentication method used in the access profile. Returns one of token, jwt, oauth2 and oidc."
                },
                "jwt_method": {
                  "type": "string",
                  "required": true,
                  "description": "The JWT signing method. Available methods are hmac and rsa for HMAC and RSA respectively. Only applicable if the auth_type is jwt."
                },
                "jwt_secret": {
                  "type": "string",
                  "required": true,
                  "description": "Based on the method, specify the HMAC shared secret or the RSA public key"
                },
                "oidc_issuer": {
                  "type": "string",
                  "required": true,
                  "description": "Discovery URL of identity provider or OIDC service. Provide only one of this or oidc_jwks_uri, not both. Only applicable if auth_type is jwt or oidc."
                },
                "oidc_jwks_uri": {
                  "type": "string",
                  "required": true,
                  "description": "JWKS URL of identity provider or OIDC service. Provide only one of this or oidc_issuer, not both. Only applicable if auth_type is jwt or oidc."
                },
                "access_profile_claim": {
                  "type": "string",
                  "required": true,
                  "description": "If you wish to use a custom claim to identify this access profile, provide the JWT claim key here. Only applicable if auth_type is jwt or oidc."
                },
                "required_claims": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "required": true,
                  "description": "Provide a list of claims that you wish to enforce. Only applicable if auth_type is jwt or oidc."
                },
                "allowed_issuers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "required": true,
                  "description": "Provide a list of issuers (represented by the 'iss' value in JWT claims) that you wish to allow. If the 'iss' claim is enforced in 'required_claims', leave this field blank to accept any 'iss' value. This parameter is only applicable when 'auth_type' is set to 'jwt' or 'oidc'."
                },
                "ip_allow_list": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "required": true,
                  "description": "List of IP addresses to be allowlisted"
                },
                "created_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                },
                "updated_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                }
              },
              "additionalProperties": false,
              "required": [
                "id",
                "name",
                "api_client_id",
                "api_collection_ids",
                "active",
                "auth_type",
                "jwt_method",
                "jwt_secret",
                "oidc_issuer",
                "oidc_jwks_uri",
                "access_profile_claim",
                "required_claims",
                "allowed_issuers",
                "ip_allow_list",
                "created_at",
                "updated_at"
              ]
            }
          }
        },
        "description": "    Refreshes the auth token or OAuth 2.0 client secret. This endpoint will fail if the authorization type on the access profile is JWT.\n\n    The response returned depends on the authorization type of the access profile (Auth token or OAuth 2.0).\n\n    1. Auth token authorization will return a new auth token in the secret response\n    2. OAuth 2.0 authorization will return a new client ID and secret in oauth_client_id and oauth_client secret\n"
      }
    },
    "/managed_users": {
      "get": {
        "tags": [
          "managed_users"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_managed_users",
        "summary": "Get List Of Customer Accounts",
        "parameters": [
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Page number of the Embedded customers to fetch. Defaults to 1."
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Number of Embedded customers to return in a single page. Defaults to 100. Max is 100."
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "required": true,
                        "description": "Customer workspace ID"
                      },
                      "external_id": {
                        "type": "string",
                        "required": true,
                        "description": "External ID of the Embedded customer"
                      },
                      "name": {
                        "type": "string",
                        "required": true,
                        "description": "Full name of the customer"
                      },
                      "environments": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "number",
                              "required": true,
                              "description": "Environment ID"
                            },
                            "environment_type": {
                              "type": "string",
                              "required": true,
                              "description": "Environment Type"
                            }
                          },
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "environment_type"
                          ]
                        }
                      },
                      "notification_email": {
                        "type": "string",
                        "required": true,
                        "description": "Comma-separated list of notification emails"
                      },
                      "full_embedding": {
                        "type": "boolean",
                        "required": true,
                        "description": "Indicates if fully embedded"
                      },
                      "admin_notification_emails": {
                        "type": "string",
                        "required": true,
                        "description": "Comma-separated list of admin notification emails"
                      },
                      "error_notification_emails": {
                        "type": "string",
                        "required": true,
                        "description": "Comma-separated list of error notification emails"
                      },
                      "plan_id": {
                        "type": "string",
                        "required": true,
                        "description": "ID of the plan assigned to this customer"
                      },
                      "origin_url": {
                        "type": "string",
                        "required": true,
                        "description": "Origin URL where the embedded IFrame is hosted"
                      },
                      "trial": {
                        "type": "boolean",
                        "required": true,
                        "description": "Indicates if the customer account is in trial"
                      },
                      "in_trial": {
                        "type": "boolean",
                        "required": true,
                        "description": "Indicates if the customer account is in trial"
                      },
                      "whitelisted_apps": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "required": true,
                        "description": "List of whitelisted applications"
                      },
                      "frame_ancestors": {
                        "type": "string",
                        "required": true,
                        "description": "Comma-separated list of frame ancestor URLs"
                      },
                      "created_at": {
                        "type": "string",
                        "required": true,
                        "description": "Timestamp in ISO 8601 format"
                      },
                      "updated_at": {
                        "type": "string",
                        "required": true,
                        "description": "Timestamp in ISO 8601 format"
                      },
                      "time_zone": {
                        "type": "string",
                        "required": true,
                        "description": "Time zone name"
                      },
                      "auth_settings": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "workato_auth",
                              "two_fa_auth",
                              "saml_sso"
                            ],
                            "required": true,
                            "description": "Type of authentication defined for the customer account"
                          },
                          "provider": {
                            "type": "string",
                            "required": true,
                            "description": "Name of the SAML provider"
                          },
                          "metadata_url": {
                            "type": "string",
                            "required": true,
                            "description": "URL to the SAML provider's metadata XML file, which contains configuration details for SAML authentication."
                          },
                          "sso_url": {
                            "type": "string",
                            "required": true,
                            "description": "Single Sign-On URL provided by the SAML provider for initiating user authentication"
                          },
                          "saml_issuer": {
                            "type": "string",
                            "required": true,
                            "description": "Unique identifier for the SAML provider, often used to identify the issuer of SAML assertions."
                          },
                          "x509_cert": {
                            "type": "string",
                            "required": true,
                            "description": "X.509 certificate provided by the SAML provider, used to verify the signature of SAML assertions."
                          },
                          "jit_provisioning": {
                            "type": "boolean",
                            "required": true,
                            "description": "Indicates if Just-In-Time provisioning is enabled, allowing users to be created upon first sign-in."
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "provider",
                          "metadata_url",
                          "sso_url",
                          "saml_issuer",
                          "x509_cert",
                          "jit_provisioning"
                        ]
                      },
                      "current_billing_period_start": {
                        "type": "string",
                        "required": true,
                        "description": "Timestamp in ISO 8601 format"
                      },
                      "current_billing_period_end": {
                        "type": "string",
                        "required": true,
                        "description": "Timestamp in ISO 8601 format"
                      },
                      "task_limit_adjustment": {
                        "type": "string",
                        "required": true,
                        "description": "Task limit adjustment for current accounting period. Only valid for task-based plans. "
                      },
                      "task_limit": {
                        "type": "number",
                        "required": true,
                        "description": "Task limit"
                      },
                      "task_count": {
                        "type": "number",
                        "required": true,
                        "description": "Tasks used by the customer"
                      },
                      "active_connection_limit": {
                        "type": "number",
                        "required": true,
                        "description": "Maximum active connections allowed for this customer"
                      },
                      "active_connection_count": {
                        "type": "number",
                        "required": true,
                        "description": "Number of active connections in the customer's workspace"
                      },
                      "active_recipe_count": {
                        "type": "number",
                        "required": true,
                        "description": "Number of running recipes in the customer's workspace"
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "id",
                      "external_id",
                      "name",
                      "environments",
                      "notification_email",
                      "full_embedding",
                      "admin_notification_emails",
                      "error_notification_emails",
                      "plan_id",
                      "origin_url",
                      "trial",
                      "in_trial",
                      "whitelisted_apps",
                      "frame_ancestors",
                      "created_at",
                      "updated_at",
                      "time_zone",
                      "auth_settings",
                      "current_billing_period_start",
                      "current_billing_period_end",
                      "task_limit_adjustment",
                      "task_limit",
                      "task_count",
                      "active_connection_limit",
                      "active_connection_count",
                      "active_recipe_count"
                    ]
                  }
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Get a list of all customer accounts"
      },
      "post": {
        "tags": [
          "managed_users"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_managed_users",
        "summary": "Create customer account",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Full name of the customer"
                },
                "notification_email": {
                  "type": "string",
                  "required": true,
                  "description": "Email for error and administrative notifications"
                },
                "oauth_id": {
                  "type": "string",
                  "description": "Identifier used for OAuth"
                },
                "external_id": {
                  "type": "string",
                  "description": "External identifier for the Embedded customer"
                },
                "origin_url": {
                  "type": "string",
                  "description": "Applies to Embedded account customers. Provide a value if the embedded IFrame is hosted in a non-default origin page. For example, customer specific custom domains. Defaults to the origin configured at the account level."
                },
                "frame_ancestors": {
                  "type": "string",
                  "description": "Provide one or more comma-separated frame ancestors. These URLs are used in the Content-Security-Policy HTTP header to allow rendering of Workato IFrames."
                },
                "plan_id": {
                  "type": "string",
                  "description": "Plan ID. Default plan is used when value is not provided."
                },
                "time_zone": {
                  "type": "string",
                  "enum": [
                    "International Date Line West",
                    "Midway Island",
                    "American Samoa",
                    "Hawaii",
                    "Alaska",
                    "Pacific Time (US & Canada)",
                    "Tijuana",
                    "Mountain Time (US & Canada)",
                    "Arizona",
                    "Chihuahua",
                    "Mazatlan",
                    "Central Time (US & Canada)",
                    "Saskatchewan",
                    "Guadalajara",
                    "Mexico City",
                    "Monterrey",
                    "Central America",
                    "Eastern Time (US & Canada)",
                    "Indiana (East)",
                    "Bogota",
                    "Lima",
                    "Quito",
                    "Atlantic Time (Canada)",
                    "Caracas",
                    "La Paz",
                    "Santiago",
                    "Newfoundland",
                    "Brasilia",
                    "Buenos Aires",
                    "Montevideo",
                    "Georgetown",
                    "Puerto Rico",
                    "Greenland",
                    "Mid-Atlantic",
                    "Azores",
                    "Cape Verde Is.",
                    "Dublin",
                    "Edinburgh",
                    "Lisbon",
                    "London",
                    "Casablanca",
                    "Monrovia",
                    "UTC",
                    "Belgrade",
                    "Bratislava",
                    "Budapest",
                    "Ljubljana",
                    "Prague",
                    "Sarajevo",
                    "Skopje",
                    "Warsaw",
                    "Zagreb",
                    "Brussels",
                    "Copenhagen",
                    "Madrid",
                    "Paris",
                    "Amsterdam",
                    "Berlin",
                    "Bern",
                    "Zurich",
                    "Rome",
                    "Stockholm",
                    "Vienna",
                    "West Central Africa",
                    "Bucharest",
                    "Cairo",
                    "Helsinki",
                    "Kyiv",
                    "Riga",
                    "Sofia",
                    "Tallinn",
                    "Vilnius",
                    "Athens",
                    "Istanbul",
                    "Minsk",
                    "Jerusalem",
                    "Harare",
                    "Pretoria",
                    "Kaliningrad",
                    "Moscow",
                    "St. Petersburg",
                    "Volgograd",
                    "Samara",
                    "Kuwait",
                    "Riyadh",
                    "Nairobi",
                    "Baghdad",
                    "Tehran",
                    "Abu Dhabi",
                    "Muscat",
                    "Baku",
                    "Tbilisi",
                    "Yerevan",
                    "Kabul",
                    "Ekaterinburg",
                    "Islamabad",
                    "Karachi",
                    "Tashkent",
                    "Chennai",
                    "Kolkata",
                    "Mumbai",
                    "New Delhi",
                    "Kathmandu",
                    "Astana",
                    "Dhaka",
                    "Sri Jayawardenepura",
                    "Almaty",
                    "Novosibirsk",
                    "Rangoon",
                    "Bangkok",
                    "Hanoi",
                    "Jakarta",
                    "Krasnoyarsk",
                    "Beijing",
                    "Chongqing",
                    "Hong Kong",
                    "Urumqi",
                    "Kuala Lumpur",
                    "Singapore",
                    "Taipei",
                    "Perth",
                    "Irkutsk",
                    "Ulaanbaatar",
                    "Seoul",
                    "Osaka",
                    "Sapporo",
                    "Tokyo",
                    "Yakutsk",
                    "Darwin",
                    "Adelaide",
                    "Canberra",
                    "Melbourne",
                    "Sydney",
                    "Brisbane",
                    "Hobart",
                    "Vladivostok",
                    "Guam",
                    "Port Moresby",
                    "Magadan",
                    "Srednekolymsk",
                    "Solomon Is.",
                    "New Caledonia",
                    "Fiji",
                    "Kamchatka",
                    "Marshall Is.",
                    "Auckland",
                    "Wellington",
                    "Nuku'alofa",
                    "Tokelau Is.",
                    "Chatham Is.",
                    "Samoa"
                  ],
                  "description": "The name of the timezone of the user. Defaults to PST if not specified."
                },
                "whitelisted_apps": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of approved applications"
                },
                "full_embedding": {
                  "type": "boolean",
                  "description": "When set to true end users are sent to the customer account's origin_url. Set to false to turn off the fully embedded redirect process at the customer account level. If you do not specify this value it defaults to null and inherits this value (true or false) from the Embedded partner's admin settings."
                }
              },
              "additionalProperties": false,
              "required": [
                "name",
                "notification_email"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "201": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/embedded_customer_fields"
            }
          }
        },
        "description": "Create a new Embedded customer"
      }
    },
    "/managed_users/{managed_user_id}": {
      "put": {
        "tags": [
          "managed_users"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_managed_users_managed_user_id",
        "summary": "Update Customer Account",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Embedded customer Account ID/External ID. External IDs should be prefixed with 'E' (e.g., 'EA2300') and URL-encoded."
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Full name of the customer"
                },
                "notification_email": {
                  "type": "string",
                  "description": "Email for error and administrative notifications"
                },
                "admin_notification_emails": {
                  "type": "string",
                  "description": "Emails for administrative notifications. This property overrides what you input in notification email property."
                },
                "error_notification_emails": {
                  "type": "string",
                  "description": "Emails for error notifications. This property overrides what you input in notification email property."
                },
                "in_trial": {
                  "type": "boolean",
                  "description": "Downgrade or upgrade the user to/from a free plan and subscription plan"
                },
                "task_limit_adjustment": {
                  "type": "number",
                  "description": "Task limit adjustment for current accounting period. Only valid for task-based plans. This adjustment will not apply to subsequent periods. Make a negative adjustment by adding \"-\" (eg. \"-5000\")."
                },
                "custom_task_limit": {
                  "type": "number",
                  "description": "Overrides the current plan limit"
                },
                "billing_start_date": {
                  "type": "string",
                  "description": "Set the current billing start date. The date should be provided in ISO 8601 format, e.g. 2021-12-31"
                },
                "external_id": {
                  "type": "string",
                  "description": "External identifier for the Embedded customer"
                },
                "origin_url": {
                  "type": "string",
                  "description": "Applies to Embedded account customers. Provide a value if the embedded IFrame is hosted in a non-default origin page. For example, customer specific custom domains. Defaults to the origin configured at the account level."
                },
                "frame_ancestors": {
                  "type": "string",
                  "description": "Provide one or more comma-separated frame ancestors. These URLs are used in the Content-Security-Policy HTTP header to allow rendering of Workato IFrames."
                },
                "plan_id": {
                  "type": "string",
                  "description": "Plan ID. Default plan is used when value is not provided."
                },
                "time_zone": {
                  "type": "string",
                  "enum": [
                    "International Date Line West",
                    "Midway Island",
                    "American Samoa",
                    "Hawaii",
                    "Alaska",
                    "Pacific Time (US & Canada)",
                    "Tijuana",
                    "Mountain Time (US & Canada)",
                    "Arizona",
                    "Chihuahua",
                    "Mazatlan",
                    "Central Time (US & Canada)",
                    "Saskatchewan",
                    "Guadalajara",
                    "Mexico City",
                    "Monterrey",
                    "Central America",
                    "Eastern Time (US & Canada)",
                    "Indiana (East)",
                    "Bogota",
                    "Lima",
                    "Quito",
                    "Atlantic Time (Canada)",
                    "Caracas",
                    "La Paz",
                    "Santiago",
                    "Newfoundland",
                    "Brasilia",
                    "Buenos Aires",
                    "Montevideo",
                    "Georgetown",
                    "Puerto Rico",
                    "Greenland",
                    "Mid-Atlantic",
                    "Azores",
                    "Cape Verde Is.",
                    "Dublin",
                    "Edinburgh",
                    "Lisbon",
                    "London",
                    "Casablanca",
                    "Monrovia",
                    "UTC",
                    "Belgrade",
                    "Bratislava",
                    "Budapest",
                    "Ljubljana",
                    "Prague",
                    "Sarajevo",
                    "Skopje",
                    "Warsaw",
                    "Zagreb",
                    "Brussels",
                    "Copenhagen",
                    "Madrid",
                    "Paris",
                    "Amsterdam",
                    "Berlin",
                    "Bern",
                    "Zurich",
                    "Rome",
                    "Stockholm",
                    "Vienna",
                    "West Central Africa",
                    "Bucharest",
                    "Cairo",
                    "Helsinki",
                    "Kyiv",
                    "Riga",
                    "Sofia",
                    "Tallinn",
                    "Vilnius",
                    "Athens",
                    "Istanbul",
                    "Minsk",
                    "Jerusalem",
                    "Harare",
                    "Pretoria",
                    "Kaliningrad",
                    "Moscow",
                    "St. Petersburg",
                    "Volgograd",
                    "Samara",
                    "Kuwait",
                    "Riyadh",
                    "Nairobi",
                    "Baghdad",
                    "Tehran",
                    "Abu Dhabi",
                    "Muscat",
                    "Baku",
                    "Tbilisi",
                    "Yerevan",
                    "Kabul",
                    "Ekaterinburg",
                    "Islamabad",
                    "Karachi",
                    "Tashkent",
                    "Chennai",
                    "Kolkata",
                    "Mumbai",
                    "New Delhi",
                    "Kathmandu",
                    "Astana",
                    "Dhaka",
                    "Sri Jayawardenepura",
                    "Almaty",
                    "Novosibirsk",
                    "Rangoon",
                    "Bangkok",
                    "Hanoi",
                    "Jakarta",
                    "Krasnoyarsk",
                    "Beijing",
                    "Chongqing",
                    "Hong Kong",
                    "Urumqi",
                    "Kuala Lumpur",
                    "Singapore",
                    "Taipei",
                    "Perth",
                    "Irkutsk",
                    "Ulaanbaatar",
                    "Seoul",
                    "Osaka",
                    "Sapporo",
                    "Tokyo",
                    "Yakutsk",
                    "Darwin",
                    "Adelaide",
                    "Canberra",
                    "Melbourne",
                    "Sydney",
                    "Brisbane",
                    "Hobart",
                    "Vladivostok",
                    "Guam",
                    "Port Moresby",
                    "Magadan",
                    "Srednekolymsk",
                    "Solomon Is.",
                    "New Caledonia",
                    "Fiji",
                    "Kamchatka",
                    "Marshall Is.",
                    "Auckland",
                    "Wellington",
                    "Nuku'alofa",
                    "Tokelau Is.",
                    "Chatham Is.",
                    "Samoa"
                  ],
                  "description": "The name of the timezone of the user. Defaults to PST if not specified."
                },
                "whitelisted_apps": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of approved applications"
                },
                "full_embedding": {
                  "type": "boolean",
                  "description": "When set to true end users are sent to the customer account's origin_url. Set to false to turn off the fully embedded redirect process at the customer account level. If you do not specify this value it defaults to null and inherits this value (true or false) from the Embedded partner's admin settings."
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "required": true,
                  "description": "Customer workspace ID"
                },
                "external_id": {
                  "type": "string",
                  "required": true,
                  "description": "External ID of the Embedded customer"
                },
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Full name of the customer"
                },
                "environments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "required": true,
                        "description": "Environment ID"
                      },
                      "environment_type": {
                        "type": "string",
                        "required": true,
                        "description": "Environment Type"
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "id",
                      "environment_type"
                    ]
                  }
                },
                "notification_email": {
                  "type": "string",
                  "required": true,
                  "description": "Comma-separated list of notification emails"
                },
                "full_embedding": {
                  "type": "boolean",
                  "required": true,
                  "description": "Indicates if fully embedded"
                },
                "admin_notification_emails": {
                  "type": "string",
                  "required": true,
                  "description": "Comma-separated list of admin notification emails"
                },
                "error_notification_emails": {
                  "type": "string",
                  "required": true,
                  "description": "Comma-separated list of error notification emails"
                },
                "plan_id": {
                  "type": "string",
                  "required": true,
                  "description": "ID of the plan assigned to this customer"
                },
                "origin_url": {
                  "type": "string",
                  "required": true,
                  "description": "Origin URL where the embedded IFrame is hosted"
                },
                "trial": {
                  "type": "boolean",
                  "required": true,
                  "description": "Indicates if the customer account is in trial"
                },
                "in_trial": {
                  "type": "boolean",
                  "required": true,
                  "description": "Indicates if the customer account is in trial"
                },
                "whitelisted_apps": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "required": true,
                  "description": "List of whitelisted applications"
                },
                "frame_ancestors": {
                  "type": "string",
                  "required": true,
                  "description": "Comma-separated list of frame ancestor URLs"
                },
                "created_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                },
                "updated_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                },
                "time_zone": {
                  "type": "string",
                  "required": true,
                  "description": "Time zone name"
                },
                "auth_settings": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "workato_auth",
                        "two_fa_auth",
                        "saml_sso"
                      ],
                      "required": true,
                      "description": "Type of authentication defined for the customer account"
                    },
                    "provider": {
                      "type": "string",
                      "required": true,
                      "description": "Name of the SAML provider"
                    },
                    "metadata_url": {
                      "type": "string",
                      "required": true,
                      "description": "URL to the SAML provider's metadata XML file, which contains configuration details for SAML authentication."
                    },
                    "sso_url": {
                      "type": "string",
                      "required": true,
                      "description": "Single Sign-On URL provided by the SAML provider for initiating user authentication"
                    },
                    "saml_issuer": {
                      "type": "string",
                      "required": true,
                      "description": "Unique identifier for the SAML provider, often used to identify the issuer of SAML assertions."
                    },
                    "x509_cert": {
                      "type": "string",
                      "required": true,
                      "description": "X.509 certificate provided by the SAML provider, used to verify the signature of SAML assertions."
                    },
                    "jit_provisioning": {
                      "type": "boolean",
                      "required": true,
                      "description": "Indicates if Just-In-Time provisioning is enabled, allowing users to be created upon first sign-in."
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "type",
                    "provider",
                    "metadata_url",
                    "sso_url",
                    "saml_issuer",
                    "x509_cert",
                    "jit_provisioning"
                  ]
                },
                "current_billing_period_start": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                },
                "current_billing_period_end": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                },
                "task_limit_adjustment": {
                  "type": "string",
                  "required": true,
                  "description": "Task limit adjustment for current accounting period. Only valid for task-based plans. "
                },
                "task_limit": {
                  "type": "number",
                  "required": true,
                  "description": "Task limit"
                },
                "task_count": {
                  "type": "number",
                  "required": true,
                  "description": "Tasks used by the customer"
                },
                "active_connection_limit": {
                  "type": "number",
                  "required": true,
                  "description": "Maximum active connections allowed for this customer"
                },
                "active_connection_count": {
                  "type": "number",
                  "required": true,
                  "description": "Number of active connections in the customer's workspace"
                },
                "active_recipe_count": {
                  "type": "number",
                  "required": true,
                  "description": "Number of running recipes in the customer's workspace"
                },
                "billing_start_date": {
                  "type": "string",
                  "required": true,
                  "description": "Current billing start date. The returned date value will be in ISO 8601 format, e.g. 2021-12-31"
                }
              },
              "additionalProperties": false,
              "required": [
                "id",
                "external_id",
                "name",
                "environments",
                "notification_email",
                "full_embedding",
                "admin_notification_emails",
                "error_notification_emails",
                "plan_id",
                "origin_url",
                "trial",
                "in_trial",
                "whitelisted_apps",
                "frame_ancestors",
                "created_at",
                "updated_at",
                "time_zone",
                "auth_settings",
                "current_billing_period_start",
                "current_billing_period_end",
                "task_limit_adjustment",
                "task_limit",
                "task_count",
                "active_connection_limit",
                "active_connection_count",
                "active_recipe_count",
                "billing_start_date"
              ]
            }
          }
        },
        "description": "Updates the information for an existing Embedded customer's account"
      },
      "get": {
        "tags": [
          "managed_users"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_managed_users_managed_user_id",
        "summary": "Get Customer Account",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Embedded customer Account ID/External ID. External IDs should be prefixed with 'E' (e.g., 'EA2300') and URL-encoded."
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/embedded_customer_fields"
            }
          }
        },
        "description": "Retrieve details about an Embedded customer's account"
      },
      "delete": {
        "tags": [
          "managed_users"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "delete_managed_users_managed_user_id",
        "summary": "Delete Customer Account",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Embedded customer Account ID/External ID. External IDs should be prefixed with 'E' (e.g., 'EA2300') and URL-encoded."
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "required": true
                }
              },
              "additionalProperties": false,
              "required": [
                "success"
              ]
            }
          }
        },
        "description": "Deletes an Embedded customer account. Once deleted, customer accounts aren't fully recoverable. Use caution when using this endpoint."
      }
    },
    "/managed_users/{managed_user_id}/upgrade": {
      "put": {
        "tags": [
          "managed_users"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_managed_users_managed_user_id_upgrade",
        "summary": "Upgrade customer plan",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Embedded customer Account ID/External ID. External IDs should be prefixed with 'E' (e.g., 'EA2300') and URL-encoded."
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "plan_id": {
                  "type": "string",
                  "description": "Plan ID. Default plan is used when value is not provided."
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/plan_fields"
            }
          }
        },
        "description": "Upgrade Embedded customer account plan to OEM plan from trial or community plan"
      }
    },
    "/managed_users/{managed_user_id}/downgrade": {
      "put": {
        "tags": [
          "managed_users"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_managed_users_managed_user_id_downgrade",
        "summary": "Downgrade customer plan",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Embedded customer Account ID/External ID. External IDs should be prefixed with 'E' (e.g., 'EA2300') and URL-encoded."
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/plan_fields"
            }
          }
        },
        "description": "Downgrade Embedded customer account to community plan"
      }
    },
    "/managed_users/{managed_user_id}/update_data_retention": {
      "put": {
        "tags": [
          "managed_users"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_managed_users_managed_user_id_update_data_retention",
        "summary": "Update customer workspace's data retention period",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Embedded customer Account ID/External ID. External IDs should be prefixed with 'E' (e.g., 'EA2300') and URL-encoded."
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "data_retention_ttl_hours": {
                  "type": "number",
                  "description": "The length of time to retain data for the specified customer workspace, in hours. The minimum data retention period is 1 hour and the maximum is determined by the Embedded customer's plan."
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "required": true
                }
              },
              "additionalProperties": false,
              "required": [
                "data"
              ]
            }
          }
        },
        "description": "Updates the data retention period for customer workspaces where the Configurable Data Retention add-on is enabled"
      }
    },
    "/managed_users/usage": {
      "get": {
        "tags": [
          "managed_users"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_managed_users_usage",
        "summary": "Get monthly usage",
        "parameters": [

        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user_id": {
                            "type": "number",
                            "required": true,
                            "description": "Customer workspace ID"
                          },
                          "intervals": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "start_datetime": {
                                  "type": "string",
                                  "required": true,
                                  "description": "Timestamp in ISO 8601 format"
                                },
                                "task_count": {
                                  "type": "number",
                                  "required": true,
                                  "description": "Number of tasks used"
                                }
                              },
                              "additionalProperties": false,
                              "required": [
                                "start_datetime",
                                "task_count"
                              ]
                            }
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "user_id",
                          "intervals"
                        ]
                      }
                    },
                    "generated_at": {
                      "type": "string",
                      "required": true,
                      "description": "Timestamp in ISO 8601 format"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "data",
                    "generated_at"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Get a list of monthly usage for all Embedded customers for the last 12 months. Task data is currently the only data available."
      }
    },
    "/managed_users/{managed_user_id}/properties": {
      "get": {
        "tags": [
          "oem_properties"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_managed_users_managed_user_id_properties",
        "summary": "List properties by prefix",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "prefix",
            "type": "string",
            "in": "query",
            "required": true,
            "description": "Return properties with the given prefix. E.g: 'salesforce_sync.'"
          },
          {
            "name": "project_id",
            "type": "string",
            "in": "query",
            "description": "If provided, returns only the project properties associated with the specified project"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Returns a hash containing key-value pairs of matching properties"
          }
        },
        "description": "Returns a list of properties belonging to a customer account that matches a prefix. For example, if the prefix provided is salesforce_sync., any account property with a name beginning with 'salesforce_sync.' will be returned. Depending on the presence of the project_id, it returns either environment properties or project properties."
      },
      "post": {
        "tags": [
          "oem_properties"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_managed_users_managed_user_id_properties",
        "summary": "Upserts properties",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "properties": {
                  "type": "object",
                  "additionalProperties": true,
                  "required": true,
                  "description": "Hash containing the names and values of the properties to upsert"
                },
                "project_id": {
                  "type": "string",
                  "description": "Project where properties should be upserted"
                }
              },
              "additionalProperties": false,
              "required": [
                "properties"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "required": true,
                  "description": "Status of the upsert operation"
                }
              },
              "additionalProperties": false,
              "required": [
                "success"
              ]
            }
          }
        },
        "description": "Performs an upsert operation on properties. The properties are matched based on the names provided in the request."
      }
    },
    "/managed_users/{managed_user_id}/imports/{package_id}": {
      "get": {
        "tags": [
          "imports"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_managed_users_managed_user_id_imports_package_id",
        "summary": "Get status of package import",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Embedded customer Account ID/External ID. External IDs should be prefixed with 'E' (e.g., 'EA2300') and URL-encoded."
          },
          {
            "name": "package_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Package ID"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "required": true,
                  "description": "Package ID"
                },
                "operation_type": {
                  "type": "string",
                  "enum": [
                    "import",
                    "export"
                  ],
                  "required": true,
                  "description": "Operation type: import or export"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "completed",
                    "in_progress",
                    "failed"
                  ],
                  "required": true,
                  "description": "Operation status: completed, in_progress, failed"
                },
                "error": {
                  "type": "string",
                  "required": true,
                  "description": "Error description if export operation failed"
                },
                "recipe_status": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "required": true,
                        "description": "Recipe ID"
                      },
                      "import_result": {
                        "type": "string",
                        "enum": [
                          "no_update_or_update_without_restart",
                          "not_found",
                          "stopped",
                          "stop_failed",
                          "restarted",
                          "restart_failed"
                        ],
                        "required": true,
                        "description": "Import result"
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "id",
                      "import_result"
                    ]
                  }
                }
              },
              "additionalProperties": false,
              "required": [
                "id",
                "operation_type",
                "status",
                "error",
                "recipe_status"
              ]
            }
          }
        },
        "description": "Get details of a package imported into a customer account"
      }
    },
    "/managed_users/{managed_user_id}/imports": {
      "post": {
        "tags": [
          "imports"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_managed_users_managed_user_id_imports",
        "summary": "Import package into a customer account",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Embedded customer Account ID/External ID. External IDs should be prefixed with 'E' (e.g., 'EA2300') and URL-encoded."
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "folder_id": {
                  "type": "string",
                  "required": true,
                  "description": "Folder id"
                },
                "restart_recipes": {
                  "type": "string",
                  "description": "Value must be 'true' to allow the restarting of running recipes during import. Packages cannot be imported if there are running recipes and this parameter equals 'false' or is not provided."
                }
              },
              "additionalProperties": false,
              "required": [
                "folder_id"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/package_fields"
            }
          }
        },
        "description": "Import a package into a specified folder in a customer account"
      }
    },
    "/api/managed_users/{managed_user_id}/recipes": {
      "get": {
        "tags": [
          "recipes"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_api_managed_users_managed_user_id_recipes",
        "summary": "List recipes belonging to user",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "updated_after",
            "type": "string",
            "in": "query",
            "description": "Date and time in ISO 8601 format"
          },
          {
            "name": "adapter_names_all",
            "type": "string",
            "in": "query",
            "description": "List of adapters names. Resulting recipes should use all of given adapters"
          },
          {
            "name": "active",
            "type": "string",
            "in": "query",
            "description": "Is flow running. 'true' - running, 'false' - stopped, all recipes otherwise"
          },
          {
            "name": "since_id",
            "type": "number",
            "in": "query",
            "description": "Find recipes with ID less than given"
          },
          {
            "name": "folder_id",
            "type": "number",
            "in": "query",
            "description": "Return the recipes in the specified folder"
          },
          {
            "name": "stop_cause",
            "type": "string",
            "enum": [
              "trigger_errors_limit",
              "action_errors_limit",
              "txn_quota_limit",
              "trial_expired",
              "action_quota_limit",
              "webhook_refresh_fail",
              "webhook_process_errors_limit"
            ],
            "in": "query",
            "description": "Return recipes with stop cause"
          },
          {
            "name": "stopped_after",
            "type": "string",
            "in": "query",
            "description": "Date and time in ISO 8601 format"
          },
          {
            "name": "running",
            "type": "string",
            "enum": [
              "true",
              "false"
            ],
            "in": "query",
            "description": "Running or stopped recipes"
          },
          {
            "name": "order",
            "type": "string",
            "in": "query",
            "description": "Set ordering method or default if blank. Possible options: activity"
          },
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Page number(defaults to 1)"
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Page size(defaults to 10. Max allowed is 100)"
          },
          {
            "name": "exclude_code",
            "type": "string",
            "enum": [
              "true"
            ],
            "in": "query",
            "description": "When 'true' the response will not contain the 'code' attribute"
          },
          {
            "name": "adapter_names_any",
            "type": "string",
            "in": "query",
            "description": "List of adapters names. Resulting recipes should use at least one of given adapters"
          }
        ],
        "responses": {
          "404": {
            "description": "Not found"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "description": "Find recipes of authenticated user with respect to different filters. Recipes are returned in descending ID order"
      },
      "post": {
        "tags": [
          "recipes"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_api_managed_users_managed_user_id_recipes",
        "summary": "Create recipe",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "recipe": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the recipe"
                    },
                    "code": {
                      "type": "string",
                      "description": "JSON string representing the recipe lines"
                    },
                    "config": {
                      "type": "string",
                      "description": "JSON string representing the connection lines"
                    },
                    "folder_id": {
                      "type": "string",
                      "description": "Folder of recipe"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          }
        },
        "description": ""
      }
    },
    "/api/managed_users/{managed_user_id}/recipes/{recipe_id}": {
      "get": {
        "tags": [
          "recipes"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_api_managed_users_managed_user_id_recipes_recipe_id",
        "summary": "Get recipe details",
        "parameters": [
          {
            "name": "recipe_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Recipe ID"
          },
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "version_no",
            "type": "number",
            "in": "query",
            "description": "Version No"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "description": "This API returns a recipe object"
      },
      "put": {
        "tags": [
          "recipes"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_api_managed_users_managed_user_id_recipes_recipe_id",
        "summary": "Update recipe",
        "parameters": [
          {
            "name": "recipe_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Recipe ID"
          },
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "recipe": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the recipe"
                    },
                    "code": {
                      "type": "string",
                      "description": "JSON string representing the recipe lines"
                    },
                    "config": {
                      "type": "string",
                      "description": "JSON string representing the connection lines"
                    },
                    "folder_id": {
                      "type": "string",
                      "description": "Folder of recipe"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          }
        },
        "description": ""
      },
      "delete": {
        "tags": [
          "recipes"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "delete_api_managed_users_managed_user_id_recipes_recipe_id",
        "summary": "Delete recipe",
        "parameters": [
          {
            "name": "recipe_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Recipe ID"
          },
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          }
        },
        "description": ""
      }
    },
    "/api/managed_users/{managed_user_id}/recipes/{recipe_id}/poll_now": {
      "post": {
        "tags": [
          "recipes"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_api_managed_users_managed_user_id_recipes_recipe_id_poll_now",
        "summary": "Forces a running recipe to poll immediately",
        "parameters": [
          {
            "name": "recipe_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Recipe ID"
          },
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "description": ""
      }
    },
    "/api/managed_users/{managed_user_id}/recipes/{recipe_id}/copy": {
      "post": {
        "tags": [
          "recipes"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_api_managed_users_managed_user_id_recipes_recipe_id_copy",
        "summary": "Copy recipe",
        "parameters": [
          {
            "name": "recipe_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Recipe ID"
          },
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "version_no": {
                  "type": "number",
                  "description": "Recipe version"
                },
                "folder_id": {
                  "type": "string",
                  "description": "Folder for the copied recipe"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          }
        },
        "description": ""
      }
    },
    "/recipes/{recipe_id}/start": {
      "put": {
        "tags": [
          "recipes"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_recipes_recipe_id_start",
        "summary": "Start recipe",
        "parameters": [
          {
            "name": "recipe_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Recipe ID"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          }
        },
        "description": ""
      }
    },
    "/recipes/{recipe_id}/stop": {
      "put": {
        "tags": [
          "recipes"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_recipes_recipe_id_stop",
        "summary": "Stop recipe",
        "parameters": [
          {
            "name": "recipe_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Recipe ID"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          }
        },
        "description": ""
      }
    },
    "/recipes/{recipe_id}/reset_trigger": {
      "post": {
        "tags": [
          "recipes"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_recipes_recipe_id_reset_trigger",
        "summary": "Reset trigger",
        "parameters": [
          {
            "name": "recipe_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Recipe ID"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          }
        },
        "description": ""
      }
    },
    "/managed_users/{managed_user_id}/recipes/{recipe_id}/start": {
      "put": {
        "tags": [
          "oem_recipes"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_managed_users_managed_user_id_recipes_recipe_id_start",
        "summary": "Start recipe",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "OEM user account id/external id. External should be prefixed with a E(eg: EA2300) and the resulting id should be URL encoded."
          },
          {
            "name": "recipe_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Recipe ID"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          }
        },
        "description": ""
      }
    },
    "/managed_users/{managed_user_id}/recipes/{recipe_id}/stop": {
      "put": {
        "tags": [
          "oem_recipes"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_managed_users_managed_user_id_recipes_recipe_id_stop",
        "summary": "Stop recipe",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "OEM user account id/external id. External should be prefixed with a E(eg: EA2300) and the resulting id should be URL encoded."
          },
          {
            "name": "recipe_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Recipe ID"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "force": {
                  "type": "string",
                  "description": "When 'true' stops the recipe by terminating long running jobs. Defaults to 'false'."
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          }
        },
        "description": ""
      }
    },
    "/recipes/search": {
      "get": {
        "tags": [
          "oem_recipes"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_recipes_search",
        "summary": "Search for public recipes. Requires 'oem_vendor' privilege.",
        "parameters": [
          {
            "name": "applications",
            "type": "string",
            "in": "query",
            "description": "Comma separated connector identifiers(e.g: salesforce,service_now). Resulting recipes should use at least one of given connectors"
          },
          {
            "name": "term",
            "type": "string",
            "in": "query",
            "description": "Search term"
          },
          {
            "name": "boost_owned",
            "type": "string",
            "in": "query",
            "description": "Give higher priority to recipes in your account. Defaults to 'false'"
          },
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Page number. Defaults to 0"
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Page size. Defaults to 20, max 20"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Recipe not found for user"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "description": ""
      }
    },
    "/managed_users/{managed_user_id}/recipes/{recipe_id}/reset_trigger": {
      "post": {
        "tags": [
          "oem_recipes"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_managed_users_managed_user_id_recipes_recipe_id_reset_trigger",
        "summary": "Reset trigger",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "OEM user account id/external id. External should be prefixed with a E(eg: EA2300) and the resulting id should be URL encoded."
          },
          {
            "name": "recipe_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Recipe ID"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          }
        },
        "description": ""
      }
    },
    "/recipes/{id}/oem_share": {
      "post": {
        "tags": [
          "oem_recipes"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_recipes_id_oem_share",
        "summary": "Share recipe. Requires 'oem_vendor' privilege.",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Recipe ID"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Recipe not found for user"
          },
          "400": {
            "description": "Bad request"
          },
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "required": true
                    },
                    "error": {
                      "type": "string",
                      "required": true
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "success",
                    "error"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": ""
      }
    },
    "/managed_users/{managed_user_id}/custom_oauth_profiles/{custom_oauth_profile_id}/assign": {
      "post": {
        "tags": [
          "oem_default_custom_oauth_profiles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_managed_users_managed_user_id_custom_oauth_profiles_custom_oauth_profile_id_assign",
        "summary": "Assign a custom OAuth profile",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Embedded customer Account ID/External ID. External IDs should be prefixed with 'E' (e.g., 'EA2300') and URL-encoded."
          },
          {
            "name": "custom_oauth_profile_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "ID of the custom OAuth profile within the Embedded partner workspace you plan to assign to a customer workspace."
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          },
          "429": {
            "description": "Too many requests"
          },
          "201": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "required": true,
                      "description": "Always returns 'true' on success"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "success"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Assigns a custom OAuth profile to a customer workspace"
      }
    },
    "/managed_users/{managed_user_id}/custom_oauth_profiles/{custom_oauth_profile_id}/unassign": {
      "delete": {
        "tags": [
          "oem_default_custom_oauth_profiles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "delete_managed_users_managed_user_id_custom_oauth_profiles_custom_oauth_profile_id_unassign",
        "summary": "Unassign a custom OAuth profile",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Embedded customer Account ID/External ID. External IDs should be prefixed with 'E' (e.g., 'EA2300') and URL-encoded."
          },
          {
            "name": "custom_oauth_profile_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "ID of the custom OAuth profile within the Embedded partner workspace you plan to unassign from a customer workspace."
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "force": {
                  "type": "string",
                  "enum": [
                    "true",
                    "false"
                  ],
                  "default": "false",
                  "description": "When 'true' unassigns the custom OAuth profile even if it is used"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          },
          "429": {
            "description": "Too many requests"
          },
          "400": {
            "description": "Bad request"
          },
          "201": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "required": true,
                      "description": "Always returns 'true' on success"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "success"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Unassigns a custom OAuth profile to a customer workspace"
      }
    },
    "/{path_base}/api_endpoints": {
      "get": {
        "tags": [
          "oem_api_endpoints"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "getpath_base_api_endpoints",
        "summary": "List API endpoints",
        "parameters": [
          {
            "name": "path_base",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Page number of the API endpoints to fetch. Defaults to 1."
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Number of API endpoints to return in a single page. Defaults to 100. Max is 100."
          },
          {
            "name": "api_collection_id",
            "type": "number",
            "in": "query",
            "description": "ID of the API collection. If the parameter is not provided, all API endpoints are returned."
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/api_endpoint_fields"
              }
            }
          }
        },
        "description": "Lists all API endpoints. Specify the api_collection_id to obtain the list of endpoints in a specific collection."
      }
    },
    "/{path_base}/api_endpoints/{api_endpoint_id}/enable": {
      "put": {
        "tags": [
          "oem_api_endpoints"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "putpath_base_api_endpoints_api_endpoint_id_enable",
        "summary": "Enable an API endpoint",
        "parameters": [
          {
            "name": "api_endpoint_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "ID of the API endpoint"
          },
          {
            "name": "path_base",
            "type": "number",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "required": true,
                  "description": "Action status"
                }
              },
              "additionalProperties": false,
              "required": [
                "success"
              ]
            }
          }
        },
        "description": "Enables an API endpoint. The underlying recipe must be started to enable the API endpoint successfully."
      }
    },
    "/{path_base}/api_endpoints/{api_endpoint_id}/disable": {
      "put": {
        "tags": [
          "oem_api_endpoints"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "putpath_base_api_endpoints_api_endpoint_id_disable",
        "summary": "Disable an API endpoint",
        "parameters": [
          {
            "name": "api_endpoint_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "ID of the API endpoint"
          },
          {
            "name": "path_base",
            "type": "number",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "required": true,
                  "description": "Action status"
                }
              },
              "additionalProperties": false,
              "required": [
                "success"
              ]
            }
          }
        },
        "description": "Disables an active API endpoint. The endpoint can no longer be called by a client."
      }
    },
    "/managed_users/{managed_user_id}/connections": {
      "get": {
        "tags": [
          "oem_connections"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_managed_users_managed_user_id_connections",
        "summary": "List Connections",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Embedded customer Account ID/External ID. External IDs should be prefixed with 'E' (e.g., 'EA2300') and URL-encoded."
          },
          {
            "name": "provider",
            "type": "string",
            "in": "query",
            "description": "The application type of the connection, e.g., 'salesforce'."
          },
          {
            "name": "folder_id",
            "type": "string",
            "in": "query",
            "description": "The ID of the project or folder containing the connection"
          },
          {
            "name": "parent_id",
            "type": "string",
            "in": "query",
            "description": "The ID of the parent connection, which must be of the same provider type."
          },
          {
            "name": "external_id",
            "type": "string",
            "in": "query",
            "description": "The external ID assigned to the connection, typically given to the user who owns the connection."
          },
          {
            "name": "include_runtime_connections",
            "type": "string",
            "in": "query",
            "default": false,
            "description": "Includes all runtime user connections when set to 'true'"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "provider": {
                        "type": "string",
                        "required": true,
                        "description": "The application type of the connection"
                      },
                      "id": {
                        "type": "number",
                        "required": true,
                        "description": "Connection ID"
                      },
                      "name": {
                        "type": "string",
                        "required": true,
                        "description": "Name of the connection"
                      },
                      "authorized_at": {
                        "type": "string",
                        "description": "Timestamp in ISO 8601 format"
                      },
                      "authorization_status": {
                        "type": "string",
                        "description": "Authorization status of the connection, can be 'success', 'exception', or nil"
                      },
                      "authorization_error": {
                        "type": "string",
                        "description": "Error message on authorization failure"
                      },
                      "created_at": {
                        "type": "string",
                        "required": true,
                        "description": "Timestamp in ISO 8601 format"
                      },
                      "updated_at": {
                        "type": "string",
                        "required": true,
                        "description": "Timestamp in ISO 8601 format"
                      },
                      "external_id": {
                        "type": "number",
                        "description": "External identifier for the user who owns the runtime user connection"
                      },
                      "folder_id": {
                        "type": "number",
                        "description": "ID of the folder where the connection is stored"
                      },
                      "parent_id": {
                        "type": "number",
                        "description": "Id of the parent connection"
                      },
                      "identity": {
                        "type": "string",
                        "required": true,
                        "description": "Returns identity of the connection"
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "provider",
                      "id",
                      "name",
                      "created_at",
                      "updated_at",
                      "identity"
                    ]
                  }
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Retrieves all connections and associated data for the Embedded customer account. Requires 'oem_vendor' privilege."
      },
      "post": {
        "tags": [
          "oem_connections"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_managed_users_managed_user_id_connections",
        "summary": "Creates a new connection",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Embedded customer Account ID/External ID. External IDs should be prefixed with 'E' (e.g., 'EA2300') and URL-encoded."
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "provider": {
                  "type": "string",
                  "required": true,
                  "description": "The application type of the connection, e.g., 'salesforce'."
                },
                "name": {
                  "type": "string",
                  "description": "Connection name. Eg: 'Prod Salesforce connection' etc."
                },
                "folder_id": {
                  "type": "number",
                  "description": "The ID of the project or folder where the connection should be stored"
                },
                "parent_id": {
                  "type": "number",
                  "description": "The ID of the parent connection, which must be of the same provider type."
                },
                "external_id": {
                  "type": "string",
                  "description": "The external ID assigned to the connection, typically given to the user who owns the connection."
                },
                "input": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Connection setting fields"
                },
                "oauth_token_pair": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string",
                      "description": "OAuth access token"
                    },
                    "refresh_token": {
                      "type": "string",
                      "description": "OAuth refresh token"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false,
              "required": [
                "provider"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "application": {
                  "type": "string",
                  "required": true,
                  "description": "Connection provider"
                },
                "id": {
                  "type": "number",
                  "required": true,
                  "description": "Connection ID"
                },
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Name of the connection"
                },
                "authorized_at": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format"
                },
                "authorization_status": {
                  "type": "string",
                  "description": "Authorization status of the connection, can be 'success', 'exception', or nil"
                },
                "authorization_error": {
                  "type": "string",
                  "description": "Error message on authorization failure"
                },
                "created_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                },
                "updated_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                },
                "external_id": {
                  "type": "number",
                  "description": "External identifier for the user who owns the runtime user connection"
                },
                "folder_id": {
                  "type": "number",
                  "description": "ID of the folder where the connection is stored"
                },
                "parent_id": {
                  "type": "number",
                  "description": "Id of the parent connection"
                },
                "description": {
                  "type": "string",
                  "required": true,
                  "description": "Connection description"
                }
              },
              "additionalProperties": false,
              "required": [
                "application",
                "id",
                "name",
                "created_at",
                "updated_at",
                "description"
              ]
            }
          }
        },
        "description": "Creates a connection in a customer's account. This endpoint supports the following in customer accounts:\n\n1. Adding a shell connection, OR\n2. Adding and authenticating a connection (not supported for OAuth type connections)\n\nRequires 'oem_vendor' privilege.\n"
      }
    },
    "/managed_users/{managed_user_id}/connections/{connection_id}": {
      "put": {
        "tags": [
          "oem_connections"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_managed_users_managed_user_id_connections_connection_id",
        "summary": "Update a connection",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Embedded customer Account ID/External ID. External IDs should be prefixed with 'E' (e.g., 'EA2300') and URL-encoded."
          },
          {
            "name": "connection_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "ID of the connection"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Connection name. Eg: 'Prod Salesforce connection' etc."
                },
                "input": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Connection setting fields"
                },
                "folder_id": {
                  "type": "number",
                  "description": "Folder id where connection should be stored."
                },
                "parent_id": {
                  "type": "number",
                  "description": "Id of parent connection."
                },
                "external_id": {
                  "type": "string",
                  "description": "External identifier given to the user who owns the runtime user connection."
                },
                "oauth_token_pair": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string",
                      "description": "OAuth access token"
                    },
                    "refresh_token": {
                      "type": "string",
                      "description": "OAuth refresh token"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "application": {
                  "type": "string",
                  "required": true,
                  "description": "Connection provider"
                },
                "id": {
                  "type": "number",
                  "required": true,
                  "description": "Connection ID"
                },
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Name of the connection"
                },
                "authorized_at": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format"
                },
                "authorization_status": {
                  "type": "string",
                  "description": "Authorization status of the connection, can be 'success', 'exception', or nil"
                },
                "authorization_error": {
                  "type": "string",
                  "description": "Error message on authorization failure"
                },
                "created_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                },
                "updated_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                },
                "external_id": {
                  "type": "number",
                  "description": "External identifier for the user who owns the runtime user connection"
                },
                "folder_id": {
                  "type": "number",
                  "description": "ID of the folder where the connection is stored"
                },
                "parent_id": {
                  "type": "number",
                  "description": "Id of the parent connection"
                },
                "description": {
                  "type": "string",
                  "required": true,
                  "description": "Connection description"
                }
              },
              "additionalProperties": false,
              "required": [
                "application",
                "id",
                "name",
                "created_at",
                "updated_at",
                "description"
              ]
            }
          }
        },
        "description": "Updates a connection in a customer account. Requires 'oem_vendor' privilege."
      },
      "delete": {
        "tags": [
          "oem_connections"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "delete_managed_users_managed_user_id_connections_connection_id",
        "summary": "Delete a Connection",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Embedded customer Account ID/External ID. External IDs should be prefixed with 'E' (e.g., 'EA2300') and URL-encoded."
          },
          {
            "name": "connection_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "ID of the connection"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "required": true,
                        "description": "Result of operation"
                      },
                      "status": {
                        "type": "string",
                        "required": true,
                        "description": "Status of operation"
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "success",
                      "status"
                    ]
                  }
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Deletes a disconnected connection in a customer account. Fails if connection is active or in use by active recipes. Requires 'oem_vendor' privilege."
      }
    },
    "/managed_users/{managed_user_id}/connections/{connection_id}/pick_list": {
      "post": {
        "tags": [
          "oem_connections"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_managed_users_managed_user_id_connections_connection_id_pick_list",
        "summary": "Get picklist values",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Embedded customer Account ID/External ID. External IDs should be prefixed with 'E' (e.g., 'EA2300') and URL-encoded."
          },
          {
            "name": "connection_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "ID of the connection"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "pick_list_name": {
                  "type": "string",
                  "required": true,
                  "description": "Name of the pick list. Obtain from this https://docs.workato.com/oem/oem-api/picklist-parameters.html"
                },
                "pick_list_params": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Picklist parameters, required in some picklists. For more information view this https://docs.workato.com/oem/oem-api/picklist-parameters.html"
                }
              },
              "additionalProperties": false,
              "required": [
                "pick_list_name"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "type": "array",
                  "required": true,
                  "description": "An array of picklist field mappings. Each inner array contains two elements: the first is the picklist field name, and the second is the picklist field ID."
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Obtains a list of picklist values for a specified connection in an Embedded customer account. Requires 'oem_vendor' privilege."
      }
    },
    "/managed_users/{managed_user_id}/connections/{connection_id}/disconnect": {
      "post": {
        "tags": [
          "oem_connections"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_managed_users_managed_user_id_connections_connection_id_disconnect",
        "summary": "Disconnect a Connection",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Embedded customer Account ID/External ID. External IDs should be prefixed with 'E' (e.g., 'EA2300') and URL-encoded."
          },
          {
            "name": "connection_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "ID of the connection"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "force": {
                  "type": "string",
                  "default": false,
                  "description": "When 'true' disconnects the connection regardless of running recipes"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "required": true,
                        "description": "Result of operation"
                      },
                      "status": {
                        "type": "string",
                        "required": true,
                        "description": "Status of operation"
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "success",
                      "status"
                    ]
                  }
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Disconnects an active connection in a customer account. If the connection is already disconnected, then no action is taken. Requires 'oem_vendor' privilege."
      }
    },
    "/members": {
      "get": {
        "tags": [
          "members"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_members",
        "summary": "List of collaborators on your workspace",
        "parameters": [

        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        },
        "description": ""
      }
    },
    "/members/{id}": {
      "get": {
        "tags": [
          "members"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_members_id",
        "summary": "Details for a collaborator",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Collaborator id"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        },
        "description": ""
      }
    },
    "/managed_users/{managed_user_id}/members": {
      "post": {
        "tags": [
          "members"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_managed_users_managed_user_id_members",
        "summary": "Add member to the OEM account. Requires 'oem_vendor' privilege.",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "OEM user account id/external id. External should be prefixed with a E(eg: EA2300) and the resulting id should be URL encoded."
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Full name of the member"
                },
                "oauth_id": {
                  "type": "string",
                  "description": "Identifier used for OAuth"
                },
                "role_name": {
                  "type": "string",
                  "description": "Membership role name"
                },
                "external_id": {
                  "type": "string",
                  "description": "External identifier for the user"
                },
                "time_zone": {
                  "type": "string",
                  "enum": [
                    "International Date Line West",
                    "Midway Island",
                    "American Samoa",
                    "Hawaii",
                    "Alaska",
                    "Pacific Time (US & Canada)",
                    "Tijuana",
                    "Mountain Time (US & Canada)",
                    "Arizona",
                    "Chihuahua",
                    "Mazatlan",
                    "Central Time (US & Canada)",
                    "Saskatchewan",
                    "Guadalajara",
                    "Mexico City",
                    "Monterrey",
                    "Central America",
                    "Eastern Time (US & Canada)",
                    "Indiana (East)",
                    "Bogota",
                    "Lima",
                    "Quito",
                    "Atlantic Time (Canada)",
                    "Caracas",
                    "La Paz",
                    "Santiago",
                    "Newfoundland",
                    "Brasilia",
                    "Buenos Aires",
                    "Montevideo",
                    "Georgetown",
                    "Puerto Rico",
                    "Greenland",
                    "Mid-Atlantic",
                    "Azores",
                    "Cape Verde Is.",
                    "Dublin",
                    "Edinburgh",
                    "Lisbon",
                    "London",
                    "Casablanca",
                    "Monrovia",
                    "UTC",
                    "Belgrade",
                    "Bratislava",
                    "Budapest",
                    "Ljubljana",
                    "Prague",
                    "Sarajevo",
                    "Skopje",
                    "Warsaw",
                    "Zagreb",
                    "Brussels",
                    "Copenhagen",
                    "Madrid",
                    "Paris",
                    "Amsterdam",
                    "Berlin",
                    "Bern",
                    "Zurich",
                    "Rome",
                    "Stockholm",
                    "Vienna",
                    "West Central Africa",
                    "Bucharest",
                    "Cairo",
                    "Helsinki",
                    "Kyiv",
                    "Riga",
                    "Sofia",
                    "Tallinn",
                    "Vilnius",
                    "Athens",
                    "Istanbul",
                    "Minsk",
                    "Jerusalem",
                    "Harare",
                    "Pretoria",
                    "Kaliningrad",
                    "Moscow",
                    "St. Petersburg",
                    "Volgograd",
                    "Samara",
                    "Kuwait",
                    "Riyadh",
                    "Nairobi",
                    "Baghdad",
                    "Tehran",
                    "Abu Dhabi",
                    "Muscat",
                    "Baku",
                    "Tbilisi",
                    "Yerevan",
                    "Kabul",
                    "Ekaterinburg",
                    "Islamabad",
                    "Karachi",
                    "Tashkent",
                    "Chennai",
                    "Kolkata",
                    "Mumbai",
                    "New Delhi",
                    "Kathmandu",
                    "Astana",
                    "Dhaka",
                    "Sri Jayawardenepura",
                    "Almaty",
                    "Novosibirsk",
                    "Rangoon",
                    "Bangkok",
                    "Hanoi",
                    "Jakarta",
                    "Krasnoyarsk",
                    "Beijing",
                    "Chongqing",
                    "Hong Kong",
                    "Urumqi",
                    "Kuala Lumpur",
                    "Singapore",
                    "Taipei",
                    "Perth",
                    "Irkutsk",
                    "Ulaanbaatar",
                    "Seoul",
                    "Osaka",
                    "Sapporo",
                    "Tokyo",
                    "Yakutsk",
                    "Darwin",
                    "Adelaide",
                    "Canberra",
                    "Melbourne",
                    "Sydney",
                    "Brisbane",
                    "Hobart",
                    "Vladivostok",
                    "Guam",
                    "Port Moresby",
                    "Magadan",
                    "Srednekolymsk",
                    "Solomon Is.",
                    "New Caledonia",
                    "Fiji",
                    "Kamchatka",
                    "Marshall Is.",
                    "Auckland",
                    "Wellington",
                    "Nuku'alofa",
                    "Tokelau Is.",
                    "Chatham Is.",
                    "Samoa"
                  ],
                  "description": "The name of the timezone of the member"
                }
              },
              "additionalProperties": false,
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        },
        "description": ""
      }
    },
    "/managed_users/{managed_user_id}/members/{member_id}": {
      "put": {
        "tags": [
          "members"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_managed_users_managed_user_id_members_member_id",
        "summary": "Update a member of a customer account",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "OEM user account id/external id. External should be prefixed with a E(eg: EA2300) and the resulting id should be URL encoded."
          },
          {
            "name": "member_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Specific member ID"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "oauth_id": {
                  "type": "string",
                  "description": "Identifier used for OAuth"
                },
                "role_name": {
                  "type": "string",
                  "description": "Membership role name"
                },
                "external_id": {
                  "type": "string",
                  "description": "External identifier for the user"
                },
                "time_zone": {
                  "type": "string",
                  "enum": [
                    "International Date Line West",
                    "Midway Island",
                    "American Samoa",
                    "Hawaii",
                    "Alaska",
                    "Pacific Time (US & Canada)",
                    "Tijuana",
                    "Mountain Time (US & Canada)",
                    "Arizona",
                    "Chihuahua",
                    "Mazatlan",
                    "Central Time (US & Canada)",
                    "Saskatchewan",
                    "Guadalajara",
                    "Mexico City",
                    "Monterrey",
                    "Central America",
                    "Eastern Time (US & Canada)",
                    "Indiana (East)",
                    "Bogota",
                    "Lima",
                    "Quito",
                    "Atlantic Time (Canada)",
                    "Caracas",
                    "La Paz",
                    "Santiago",
                    "Newfoundland",
                    "Brasilia",
                    "Buenos Aires",
                    "Montevideo",
                    "Georgetown",
                    "Puerto Rico",
                    "Greenland",
                    "Mid-Atlantic",
                    "Azores",
                    "Cape Verde Is.",
                    "Dublin",
                    "Edinburgh",
                    "Lisbon",
                    "London",
                    "Casablanca",
                    "Monrovia",
                    "UTC",
                    "Belgrade",
                    "Bratislava",
                    "Budapest",
                    "Ljubljana",
                    "Prague",
                    "Sarajevo",
                    "Skopje",
                    "Warsaw",
                    "Zagreb",
                    "Brussels",
                    "Copenhagen",
                    "Madrid",
                    "Paris",
                    "Amsterdam",
                    "Berlin",
                    "Bern",
                    "Zurich",
                    "Rome",
                    "Stockholm",
                    "Vienna",
                    "West Central Africa",
                    "Bucharest",
                    "Cairo",
                    "Helsinki",
                    "Kyiv",
                    "Riga",
                    "Sofia",
                    "Tallinn",
                    "Vilnius",
                    "Athens",
                    "Istanbul",
                    "Minsk",
                    "Jerusalem",
                    "Harare",
                    "Pretoria",
                    "Kaliningrad",
                    "Moscow",
                    "St. Petersburg",
                    "Volgograd",
                    "Samara",
                    "Kuwait",
                    "Riyadh",
                    "Nairobi",
                    "Baghdad",
                    "Tehran",
                    "Abu Dhabi",
                    "Muscat",
                    "Baku",
                    "Tbilisi",
                    "Yerevan",
                    "Kabul",
                    "Ekaterinburg",
                    "Islamabad",
                    "Karachi",
                    "Tashkent",
                    "Chennai",
                    "Kolkata",
                    "Mumbai",
                    "New Delhi",
                    "Kathmandu",
                    "Astana",
                    "Dhaka",
                    "Sri Jayawardenepura",
                    "Almaty",
                    "Novosibirsk",
                    "Rangoon",
                    "Bangkok",
                    "Hanoi",
                    "Jakarta",
                    "Krasnoyarsk",
                    "Beijing",
                    "Chongqing",
                    "Hong Kong",
                    "Urumqi",
                    "Kuala Lumpur",
                    "Singapore",
                    "Taipei",
                    "Perth",
                    "Irkutsk",
                    "Ulaanbaatar",
                    "Seoul",
                    "Osaka",
                    "Sapporo",
                    "Tokyo",
                    "Yakutsk",
                    "Darwin",
                    "Adelaide",
                    "Canberra",
                    "Melbourne",
                    "Sydney",
                    "Brisbane",
                    "Hobart",
                    "Vladivostok",
                    "Guam",
                    "Port Moresby",
                    "Magadan",
                    "Srednekolymsk",
                    "Solomon Is.",
                    "New Caledonia",
                    "Fiji",
                    "Kamchatka",
                    "Marshall Is.",
                    "Auckland",
                    "Wellington",
                    "Nuku'alofa",
                    "Tokelau Is.",
                    "Chatham Is.",
                    "Samoa"
                  ],
                  "description": "The name of the timezone of the member"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "required": true
                },
                "grant_type": {
                  "type": "string",
                  "required": true
                },
                "role_name": {
                  "type": "string",
                  "required": true
                },
                "external_id": {
                  "type": "string",
                  "required": true
                },
                "name": {
                  "type": "string",
                  "required": true
                },
                "email": {
                  "type": "string",
                  "required": true
                },
                "time_zone": {
                  "type": "string",
                  "enum": [
                    "International Date Line West",
                    "Midway Island",
                    "American Samoa",
                    "Hawaii",
                    "Alaska",
                    "Pacific Time (US & Canada)",
                    "Tijuana",
                    "Mountain Time (US & Canada)",
                    "Arizona",
                    "Chihuahua",
                    "Mazatlan",
                    "Central Time (US & Canada)",
                    "Saskatchewan",
                    "Guadalajara",
                    "Mexico City",
                    "Monterrey",
                    "Central America",
                    "Eastern Time (US & Canada)",
                    "Indiana (East)",
                    "Bogota",
                    "Lima",
                    "Quito",
                    "Atlantic Time (Canada)",
                    "Caracas",
                    "La Paz",
                    "Santiago",
                    "Newfoundland",
                    "Brasilia",
                    "Buenos Aires",
                    "Montevideo",
                    "Georgetown",
                    "Puerto Rico",
                    "Greenland",
                    "Mid-Atlantic",
                    "Azores",
                    "Cape Verde Is.",
                    "Dublin",
                    "Edinburgh",
                    "Lisbon",
                    "London",
                    "Casablanca",
                    "Monrovia",
                    "UTC",
                    "Belgrade",
                    "Bratislava",
                    "Budapest",
                    "Ljubljana",
                    "Prague",
                    "Sarajevo",
                    "Skopje",
                    "Warsaw",
                    "Zagreb",
                    "Brussels",
                    "Copenhagen",
                    "Madrid",
                    "Paris",
                    "Amsterdam",
                    "Berlin",
                    "Bern",
                    "Zurich",
                    "Rome",
                    "Stockholm",
                    "Vienna",
                    "West Central Africa",
                    "Bucharest",
                    "Cairo",
                    "Helsinki",
                    "Kyiv",
                    "Riga",
                    "Sofia",
                    "Tallinn",
                    "Vilnius",
                    "Athens",
                    "Istanbul",
                    "Minsk",
                    "Jerusalem",
                    "Harare",
                    "Pretoria",
                    "Kaliningrad",
                    "Moscow",
                    "St. Petersburg",
                    "Volgograd",
                    "Samara",
                    "Kuwait",
                    "Riyadh",
                    "Nairobi",
                    "Baghdad",
                    "Tehran",
                    "Abu Dhabi",
                    "Muscat",
                    "Baku",
                    "Tbilisi",
                    "Yerevan",
                    "Kabul",
                    "Ekaterinburg",
                    "Islamabad",
                    "Karachi",
                    "Tashkent",
                    "Chennai",
                    "Kolkata",
                    "Mumbai",
                    "New Delhi",
                    "Kathmandu",
                    "Astana",
                    "Dhaka",
                    "Sri Jayawardenepura",
                    "Almaty",
                    "Novosibirsk",
                    "Rangoon",
                    "Bangkok",
                    "Hanoi",
                    "Jakarta",
                    "Krasnoyarsk",
                    "Beijing",
                    "Chongqing",
                    "Hong Kong",
                    "Urumqi",
                    "Kuala Lumpur",
                    "Singapore",
                    "Taipei",
                    "Perth",
                    "Irkutsk",
                    "Ulaanbaatar",
                    "Seoul",
                    "Osaka",
                    "Sapporo",
                    "Tokyo",
                    "Yakutsk",
                    "Darwin",
                    "Adelaide",
                    "Canberra",
                    "Melbourne",
                    "Sydney",
                    "Brisbane",
                    "Hobart",
                    "Vladivostok",
                    "Guam",
                    "Port Moresby",
                    "Magadan",
                    "Srednekolymsk",
                    "Solomon Is.",
                    "New Caledonia",
                    "Fiji",
                    "Kamchatka",
                    "Marshall Is.",
                    "Auckland",
                    "Wellington",
                    "Nuku'alofa",
                    "Tokelau Is.",
                    "Chatham Is.",
                    "Samoa"
                  ],
                  "required": true
                }
              },
              "additionalProperties": false,
              "required": [
                "id",
                "grant_type",
                "role_name",
                "external_id",
                "name",
                "email",
                "time_zone"
              ]
            }
          }
        },
        "description": ""
      },
      "delete": {
        "tags": [
          "members"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "delete_managed_users_managed_user_id_members_member_id",
        "summary": "Remove member from the OEM account. Requires 'oem_vendor' privilege.",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "OEM user account id/external id. External should be prefixed with a E(eg: EA2300) and the resulting id should be URL encoded."
          },
          {
            "name": "member_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Specific member ID"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        },
        "description": ""
      }
    },
    "/members/{id}/privileges": {
      "get": {
        "tags": [
          "members"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_members_id_privileges",
        "summary": "List of privileges for a given collaborator by environment",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Collaborator id"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        },
        "description": ""
      }
    },
    "/managed_users/{managed_user_id}/roles": {
      "get": {
        "tags": [
          "oem_roles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_managed_users_managed_user_id_roles",
        "summary": "List custom roles belonging to user",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Page number(defaults to 1)"
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Page size(defaults to 100. Max allowed is 100)"
          },
          {
            "name": "role_name",
            "type": "string",
            "in": "query",
            "description": "Filter by role_name"
          }
        ],
        "responses": {
          "500": {
            "description": "Server error"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "description": "Return all custom roles of current user"
      }
    },
    "/managed_users/{managed_user_id}/roles/{id}/copy": {
      "post": {
        "tags": [
          "oem_roles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_managed_users_managed_user_id_roles_id_copy",
        "summary": "Make a copy of an existing role",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Name of the new role"
                },
                "folder_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Array of project folder ids to override. The source folder ids are copied as is when not provided"
                }
              },
              "additionalProperties": false,
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Server error"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "description": "Return the newly created role"
      }
    },
    "/managed_users/{managed_user_id}/projects": {
      "get": {
        "tags": [
          "projects"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_managed_users_managed_user_id_projects",
        "summary": "List projects",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Page number of the projects to fetch. Defaults to 1."
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Number of projects to return in a single page. Defaults to 100. Max is 100."
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/project_fields"
              }
            }
          }
        },
        "description": "Lists all projects"
      }
    },
    "/managed_users/{managed_user_id}/projects/{project_id}": {
      "delete": {
        "tags": [
          "projects"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "delete_managed_users_managed_user_id_projects_project_id",
        "summary": "Delete a project",
        "parameters": [
          {
            "name": "project_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "The ID of the project you plan to delete"
          },
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "required": true,
                  "description": "Always returns 'true' on success"
                }
              },
              "additionalProperties": false,
              "required": [
                "success"
              ]
            }
          }
        },
        "description": "Delete a project within your workspace. Projects are top level folders that normally encompass a single use case."
      }
    },
    "/projects/{id}/deploy": {
      "post": {
        "tags": [
          "projects"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_projects_id_deploy",
        "summary": "Deploy a project",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Project ID. This parameter accepts a valid project_id or a valid folder_id, formatted as f{:folder_id}, for example: f660222."
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "environment_type": {
                  "type": "string",
                  "required": true,
                  "description": "The environment the project will be deployed to. Accepted values: test, prod."
                },
                "description": {
                  "type": "string",
                  "description": "A brief description of the deployment."
                }
              },
              "additionalProperties": false,
              "required": [
                "environment_type"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "429": {
            "description": "Too many requests"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "required": true,
                  "description": "Deployment ID"
                },
                "created_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                },
                "updated_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                },
                "description": {
                  "type": "string",
                  "required": true,
                  "description": "Description of the deployment"
                },
                "project_build_id": {
                  "type": "number",
                  "required": true,
                  "description": "ID of the associated project build"
                },
                "environment_type": {
                  "type": "string",
                  "required": true,
                  "description": "The environment where the project is deployed"
                },
                "project_id": {
                  "type": "string",
                  "required": true,
                  "description": "Project ID"
                },
                "state": {
                  "type": "string",
                  "required": true,
                  "description": "Status of the build. Possible values are: pending, success and failed."
                },
                "performed_by_name": {
                  "type": "string",
                  "required": true,
                  "description": "Name of the user who initiated the build"
                }
              },
              "additionalProperties": false,
              "required": [
                "id",
                "created_at",
                "updated_at",
                "description",
                "project_build_id",
                "environment_type",
                "project_id",
                "state",
                "performed_by_name"
              ]
            }
          }
        },
        "description": "Builds and deploys a project to an environment"
      }
    },
    "/projects/{id}/build": {
      "post": {
        "tags": [
          "projects"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_projects_id_build",
        "summary": "Build a project",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Project ID. This parameter accepts a valid project_id or a valid folder_id, formatted as f{:folder_id}, for example: f660222."
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string",
                  "description": "A brief description of the build"
                },
                "include_test_cases": {
                  "type": "boolean",
                  "description": "Instructs the build to include test cases or not. Default: false"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "429": {
            "description": "Too many requests"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "required": true,
                  "description": "Build ID"
                },
                "created_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                },
                "updated_at": {
                  "type": "string",
                  "required": true,
                  "description": "Timestamp in ISO 8601 format"
                },
                "description": {
                  "type": "string",
                  "required": true,
                  "description": "Description of the build"
                },
                "project_id": {
                  "type": "string",
                  "required": true,
                  "description": "Project ID"
                },
                "state": {
                  "type": "string",
                  "required": true,
                  "description": "Status of the build. Possible values are: pending, success and failed."
                },
                "performed_by_name": {
                  "type": "string",
                  "required": true,
                  "description": "Name of the user who initiated the build"
                },
                "download_url": {
                  "type": "string",
                  "required": true,
                  "description": "URL to download the package. Returns null, if the build is not complete."
                }
              },
              "additionalProperties": false,
              "required": [
                "id",
                "created_at",
                "updated_at",
                "description",
                "project_id",
                "state",
                "performed_by_name",
                "download_url"
              ]
            }
          }
        },
        "description": "Builds a project. You can use this endpoint (/api/project_builds/:id/deploy) to deploy the project to an environment."
      }
    },
    "/managed_users/{managed_user_id}/api_clients": {
      "get": {
        "tags": [
          "oem_api_customers"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_managed_users_managed_user_id_api_clients",
        "summary": "List API clients",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Page number of the API clients to fetch. Defaults to 1."
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Number of API clients to return in a single page. Defaults to 100. Max is 100."
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/api_client_fields"
              }
            }
          }
        },
        "description": "List all API clients. This endpoint includes the project_id to which the API client belongs in the response."
      },
      "post": {
        "tags": [
          "oem_api_customers"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_managed_users_managed_user_id_api_clients",
        "summary": "Create an API client",
        "parameters": [
          {
            "name": "managed_user_id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Name of the client"
                },
                "project_id": {
                  "type": "string",
                  "description": "The ID of a specific project. Retrieve a list of project IDs by using the list projects endpoint."
                }
              },
              "additionalProperties": false,
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/api_client_fields"
            }
          }
        },
        "description": "Create a new API client within a project you specify"
      }
    },
    "/api/member_invitations": {
      "post": {
        "tags": [
          "member_invitations"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_api_member_invitations",
        "summary": "Invite a new team member",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Team member's name"
                },
                "email": {
                  "type": "string",
                  "required": true,
                  "description": "Team member's email"
                },
                "role_name": {
                  "type": "string",
                  "required": true,
                  "description": "Role name"
                }
              },
              "additionalProperties": false,
              "required": [
                "name",
                "email",
                "role_name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "description": ""
      }
    },
    "/customer_managers": {
      "get": {
        "tags": [
          "customer_managers"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_customer_managers",
        "summary": "List customer managers",
        "parameters": [

        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Successful reply",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customer_manager_grant"
              }
            }
          }
        },
        "description": "Return all customer managers for current user"
      },
      "post": {
        "tags": [
          "customer_managers"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_customer_managers",
        "summary": "Create new customer manager",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "team_collaborator_id": {
                  "type": "number",
                  "required": true,
                  "description": "Id of collaborator"
                },
                "role_id": {
                  "type": "number",
                  "required": true,
                  "description": "Role id for customer manager"
                },
                "permitted_workspace_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "description": "Permitted workspace IDs"
                }
              },
              "additionalProperties": false,
              "required": [
                "team_collaborator_id",
                "role_id"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/customer_manager_grant"
            }
          }
        },
        "description": "create customer manager"
      }
    },
    "/customer_managers/{id}": {
      "put": {
        "tags": [
          "customer_managers"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_customer_managers_id",
        "summary": "Update customer manager",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "role_id": {
                  "type": "number",
                  "required": true,
                  "description": "Role id"
                },
                "permitted_workspace_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "description": "Permitted workspace IDs"
                }
              },
              "additionalProperties": false,
              "required": [
                "role_id"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/customer_manager_grant"
            }
          }
        },
        "description": "Update role id for customer manager"
      },
      "delete": {
        "tags": [
          "customer_managers"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "delete_customer_managers_id",
        "summary": "Remove customer manager",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Custom adapter ID"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          }
        },
        "description": ""
      }
    },
    "/account/signature_verification_key": {
      "put": {
        "tags": [
          "oem_account"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_account_signature_verification_key",
        "summary": "Update JWT signature verification key",
        "parameters": [

        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad request"
          },
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "required": true
                    },
                    "error": {
                      "type": "string",
                      "required": true
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "success",
                    "error"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Update JWT direct link signature verification key"
      }
    },
    "/custom_connectors": {
      "get": {
        "tags": [
          "custom_connectors"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_custom_connectors",
        "summary": "List custom connectors",
        "parameters": [
          {
            "name": "title",
            "type": "string",
            "in": "query",
            "description": "Search for custom connectors by their titles. Partial matches will also be returned."
          },
          {
            "name": "oem_shared",
            "type": "string",
            "enum": [
              "true",
              "false"
            ],
            "in": "query",
            "description": "Search for custom connectors that are shared from your OEM master account. Requires 'oem_vendor' privilege"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "required": true,
                        "description": "Custom connector ID"
                      },
                      "name": {
                        "type": "string",
                        "required": true,
                        "description": "Custom connector name"
                      },
                      "titile": {
                        "type": "string",
                        "required": true,
                        "description": "Custom connector title"
                      },
                      "latest_released_version": {
                        "type": "number",
                        "required": true,
                        "description": "Custom connector latest released version number"
                      },
                      "latest_released_version_note": {
                        "type": "string",
                        "required": true,
                        "description": "Custom connector latest released version note"
                      },
                      "released_versions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "version": {
                              "type": "number",
                              "required": true,
                              "description": "Version number"
                            },
                            "version_note": {
                              "type": "string",
                              "required": true,
                              "description": "Version note"
                            },
                            "created_at": {
                              "type": "string",
                              "required": true,
                              "description": "Timestamp in ISO 8601 format"
                            },
                            "released_at": {
                              "type": "string",
                              "required": true,
                              "description": "Timestamp in ISO 8601 format"
                            }
                          },
                          "additionalProperties": false,
                          "required": [
                            "version",
                            "version_note",
                            "created_at",
                            "released_at"
                          ]
                        }
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "id",
                      "name",
                      "titile",
                      "latest_released_version",
                      "latest_released_version_note",
                      "released_versions"
                    ]
                  }
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "List custom connectors in your Workspace"
      },
      "post": {
        "tags": [
          "custom_connectors"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_custom_connectors",
        "summary": "Create custom connector",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "The title of the custom connector you plan to create"
                },
                "logo": {
                  "type": "string",
                  "description": "The logo you plan to add to your custom connector. Your logo must be encoded in Base64 format."
                },
                "description": {
                  "type": "string",
                  "description": "A description of your custom connector. Markdown is allowed."
                },
                "note": {
                  "type": "string",
                  "description": "Notes for the initial version of your custom connector"
                },
                "code": {
                  "type": "string",
                  "description": "The Ruby code for your custom connector. Ensure that the code is stringified. Your code cannot exceed 10MB in size."
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/custom_connector_extended_fields"
            }
          }
        },
        "description": "This endpoint allows you to create a custom connector in your workspace"
      }
    },
    "/custom_connectors/{id}": {
      "get": {
        "tags": [
          "custom_connectors"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_custom_connectors_id",
        "summary": "Get custom connector by ID",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Custom connector ID"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/custom_connector_fields"
            }
          }
        },
        "description": "Retrieve a specific custom connector by ID. Requires 'oem_vendor' privilege."
      },
      "put": {
        "tags": [
          "custom_connectors"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_custom_connectors_id",
        "summary": "Update custom connector",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Custom connector ID"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "The title of the custom connector you plan to create"
                },
                "logo": {
                  "type": "string",
                  "description": "The logo you plan to add to your custom connector. Your logo must be encoded in Base64 format."
                },
                "description": {
                  "type": "string",
                  "description": "A description of your custom connector. Markdown is allowed."
                },
                "note": {
                  "type": "string",
                  "description": "Notes for the initial version of your custom connector"
                },
                "code": {
                  "type": "string",
                  "description": "The Ruby code for your custom connector. Ensure that the code is stringified. Your code cannot exceed 10MB in size."
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/custom_connector_extended_fields"
            }
          }
        },
        "description": "This endpoint allows you to update a custom connector in your workspace"
      }
    },
    "/custom_connectors/{id}/share_oem_version/{version}": {
      "post": {
        "tags": [
          "custom_connectors"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_custom_connectors_id_share_oem_version_version",
        "summary": "Upsert version of shared custom connector",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Custom connector ID"
          },
          {
            "name": "version",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "The version of the custom connector in your Workspace to share. This must be a released version."
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "required": true,
                      "description": "Returns 'true' if the upsert is successful"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "created",
                        "updated",
                        "error"
                      ],
                      "required": true,
                      "description": "Status of the upsert action"
                    },
                    "message": {
                      "type": "string",
                      "required": true,
                      "description": "Error message. Only available in case of error."
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "success",
                    "status",
                    "message"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Creates or updates the version of a shared custom connector in an OEM Master Account. Requires 'oem_vendor' privilege.\n\n1. If the connector is not already shared, this action creates a new shared connector at the specified version.\n2. If the connector is currently shared, this updates the version currently shared for this connector.\n"
      }
    },
    "/custom_connectors/{id}/suppress_oem_version": {
      "delete": {
        "tags": [
          "custom_connectors"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "delete_custom_connectors_id_suppress_oem_version",
        "summary": "Remove sharing of the custom connector oem version",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Custom connector ID"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "required": true,
                      "description": "Returns 'true' if the delete is successful"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "suppressed",
                        "error"
                      ],
                      "required": true,
                      "description": "Status of the delete action"
                    },
                    "message": {
                      "type": "string",
                      "required": true,
                      "description": "Error message. Only available in case of error."
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "success",
                    "status",
                    "message"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Remove sharing of the custom connector oem version. Requires 'oem_vendor' privilege. This does not delete the custom connector from your workspace. Please note that using this API whils there are customers accounts using this connector will impact their recipes."
      }
    },
    "/custom_connectors/{id}/release": {
      "post": {
        "tags": [
          "custom_connectors"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_custom_connectors_id_release",
        "summary": "Release custom connector",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Custom connector ID"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/custom_connector_extended_fields"
            }
          }
        },
        "description": "The Release operation allows you to release the latest version of your custom connector. After you release the new version, it is used in all future jobs."
      }
    },
    "/custom_connectors/{id}/share": {
      "post": {
        "tags": [
          "custom_connectors"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_custom_connectors_id_share",
        "summary": "Share custom connector",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Custom connector ID"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/custom_connector_extended_fields"
            }
          }
        },
        "description": "The Share operation allows you to share the most recently released version of your custom connector. After you share your custom connector, all workspaces that have installed your connector through a private link or from the community library receive an update notification."
      }
    },
    "/custom_connectors/search": {
      "get": {
        "tags": [
          "custom_connectors"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_custom_connectors_search",
        "summary": "Search custom connector belonging to user by title",
        "parameters": [
          {
            "name": "title",
            "type": "string",
            "in": "query",
            "required": true,
            "description": "Title name to search for a custom connector"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "required": true,
                        "description": "Custom connector ID"
                      },
                      "name": {
                        "type": "string",
                        "required": true,
                        "description": "Custom connector name"
                      },
                      "titile": {
                        "type": "string",
                        "required": true,
                        "description": "Custom connector title"
                      },
                      "logo": {
                        "type": "string",
                        "required": true,
                        "description": "Base64 encoded logo"
                      },
                      "latest_version": {
                        "type": "number",
                        "required": true,
                        "description": "Latest version number"
                      },
                      "latest_version_note": {
                        "type": "string",
                        "required": true,
                        "description": "Latest version note"
                      },
                      "latest_released_version": {
                        "type": "number",
                        "required": true,
                        "description": "Custom connector latest released version number"
                      },
                      "latest_released_version_note": {
                        "type": "string",
                        "required": true,
                        "description": "Latest released version note"
                      },
                      "latest_shared_version": {
                        "type": "number",
                        "required": true,
                        "description": "Latest shared version number"
                      },
                      "latest_shared_version_note": {
                        "type": "string",
                        "required": true,
                        "description": "Latest shared version note"
                      },
                      "oem_shared_version": {
                        "type": "number",
                        "required": true,
                        "description": "Version number of the customer connector shared with OEM customers. Available only for OEM Admins"
                      },
                      "oem_shared_at": {
                        "type": "string",
                        "required": true,
                        "description": "Timestamp in ISO 8601 format. Available only for OEM Admins"
                      },
                      "recent_released_versions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "version": {
                              "type": "number",
                              "required": true,
                              "description": "Version number"
                            },
                            "version_note": {
                              "type": "string",
                              "required": true,
                              "description": "Version note"
                            },
                            "created_at": {
                              "type": "string",
                              "required": true,
                              "description": "Timestamp in ISO 8601 format"
                            },
                            "released_at": {
                              "type": "string",
                              "required": true,
                              "description": "Timestamp in ISO 8601 format"
                            }
                          },
                          "additionalProperties": false,
                          "required": [
                            "version",
                            "version_note",
                            "created_at",
                            "released_at"
                          ]
                        }
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "id",
                      "name",
                      "titile",
                      "logo",
                      "latest_version",
                      "latest_version_note",
                      "latest_released_version",
                      "latest_released_version_note",
                      "latest_shared_version",
                      "latest_shared_version_note",
                      "oem_shared_version",
                      "oem_shared_at",
                      "recent_released_versions"
                    ]
                  }
                }
              },
              "additionalProperties": false,
              "required": [
                "data"
              ]
            }
          }
        },
        "description": "Search for custom connectors by their titles. Partial matches will also be returned."
      }
    },
    "/api/custom_connectors/{id}/code": {
      "get": {
        "tags": [
          "custom_connectors"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_api_custom_connectors_id_code",
        "summary": "Get custom connectors code",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Custom connector ID"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "required": true,
                      "description": "Stringified custom connector code"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "code"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "data"
              ]
            }
          }
        },
        "description": "This endpoint allows you to fetch a custom connector's code"
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "users"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_users_me",
        "summary": "Get details of authenticated user",
        "parameters": [

        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        },
        "description": ""
      }
    },
    "/folders": {
      "get": {
        "tags": [
          "folders"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_folders",
        "summary": "List folders",
        "parameters": [
          {
            "name": "parent_id",
            "type": "number",
            "in": "query",
            "description": "Parent folder ID. Defaults to Home folder."
          },
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Page number of the folders to fetch. Defaults to 1."
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Number of folders to return in a single page. Defaults to 100. Max is 100."
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/folder_fields"
              }
            }
          }
        },
        "description": "Lists all folders"
      },
      "post": {
        "tags": [
          "folders"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_folders",
        "summary": "Create a folder",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Folder name"
                },
                "parent_id": {
                  "type": "number",
                  "description": "Parent folder ID. Defaults to Home folder."
                }
              },
              "additionalProperties": false,
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/folder_fields"
            }
          }
        },
        "description": "Creates a new folder in the specified parent folder. If no parent folder ID is specified, the folder created will be a top level folder (in the Home folder)."
      }
    },
    "/folders/{folder_id}": {
      "delete": {
        "tags": [
          "folders"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "delete_folders_folder_id",
        "summary": "Delete a folder",
        "parameters": [
          {
            "name": "folder_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "The ID of the folder you plan to delete"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "force": {
                  "type": "boolean",
                  "description": "Set this parameter to true to delete a folder that is not empty. When true, the folder you specify using the folder_id parameter, and its contents (all recipes and connections) within the folder are deleted. If set to false, this action can only delete an empty folder."
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "required": true,
                  "description": "Always returns 'true' on success"
                }
              },
              "additionalProperties": false,
              "required": [
                "success"
              ]
            }
          }
        },
        "description": "Delete a folder within your workspace."
      }
    },
    "/properties": {
      "get": {
        "tags": [
          "properties"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_properties",
        "summary": "List properties by prefix",
        "parameters": [
          {
            "name": "prefix",
            "type": "string",
            "in": "query",
            "required": true,
            "description": "Return properties with the given prefix. E.g: 'salesforce_sync.'"
          },
          {
            "name": "project_id",
            "type": "string",
            "in": "query",
            "description": "If provided, returns only the project properties associated with the specified project"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Returns a hash containing key-value pairs of matching properties"
          }
        },
        "description": "Returns a list of properties belonging to a customer account that matches a prefix. For example, if the prefix provided is salesforce_sync., any account property with a name beginning with 'salesforce_sync.' will be returned. Depending on the presence of the project_id, it returns either environment properties or project properties."
      },
      "post": {
        "tags": [
          "properties"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_properties",
        "summary": "Upserts properties",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "properties": {
                  "type": "object",
                  "additionalProperties": true,
                  "required": true,
                  "description": "Hash containing the names and values of the properties to upsert"
                },
                "project_id": {
                  "type": "string",
                  "description": "Project where properties should be upserted"
                }
              },
              "additionalProperties": false,
              "required": [
                "properties"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "required": true,
                  "description": "Status of the upsert operation"
                }
              },
              "additionalProperties": false,
              "required": [
                "success"
              ]
            }
          }
        },
        "description": "Performs an upsert operation on properties. The properties are matched based on the names provided in the request."
      }
    },
    "/deployments": {
      "get": {
        "tags": [
          "deployments"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_deployments",
        "summary": "Get deployments",
        "parameters": [
          {
            "name": "project_id",
            "type": "string",
            "in": "query",
            "description": "Project ID"
          },
          {
            "name": "state",
            "type": "string",
            "in": "query",
            "description": "State (pending, success, or failed)"
          },
          {
            "name": "environment_type",
            "type": "string",
            "in": "query",
            "description": "Environment type"
          },
          {
            "name": "from",
            "type": "string",
            "in": "query",
            "description": "Timestamp in ISO 8601 format"
          },
          {
            "name": "to",
            "type": "string",
            "in": "query",
            "description": "Timestamp in ISO 8601 format"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "description": ""
      }
    },
    "/deployments/{id}": {
      "get": {
        "tags": [
          "deployments"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_deployments_id",
        "summary": "Get deployment",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Deployment ID"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "description": ""
      }
    },
    "/sdk/generate_schema/json": {
      "post": {
        "tags": [
          "generate_schemas"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_sdk_generate_schema_json",
        "summary": "Generate schema from JSON",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "sample": {
                  "type": "string",
                  "required": true,
                  "description": "Stringified JSON of the sample document to parse"
                }
              },
              "additionalProperties": false,
              "required": [
                "sample"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Matching schema definition"
          }
        },
        "description": "Generates Workato schema from a stringified JSON sample"
      }
    },
    "/sdk/generate_schema/csv": {
      "post": {
        "tags": [
          "generate_schemas"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_sdk_generate_schema_csv",
        "summary": "Generate schema from CSV",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "sample": {
                  "type": "string",
                  "required": true,
                  "description": "Stringified CSV of the sample document to parse"
                },
                "col_sep": {
                  "type": "string",
                  "enum": [
                    "comma",
                    "semicolon",
                    "space",
                    "tab",
                    "colon",
                    "pipe"
                  ],
                  "description": "Column delimiter for the CSV sample. Must be one of the following: comma, semicolon, space, tab, colon, pipe."
                },
                "custom_col_sep": {
                  "type": "string",
                  "description": "Custom column delimiter for the CSV sample. If both 'col_sep' and 'custom_col_sep' are provided, 'col_sep' will be considered."
                }
              },
              "additionalProperties": false,
              "required": [
                "sample"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Matching schema definition"
          }
        },
        "description": "Generates Workato schema from a stringified CSV sample"
      }
    },
    "/recipes/{recipe_id}/jobs/{handle}/line_details": {
      "get": {
        "tags": [
          "jobs_history"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_recipes_recipe_id_jobs_handle_line_details",
        "summary": "Get job's line details",
        "parameters": [
          {
            "name": "recipe_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Recipe ID"
          },
          {
            "name": "handle",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "id",
            "type": "string",
            "in": "query",
            "required": true,
            "description": "Job ID"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply"
          }
        },
        "description": ""
      }
    },
    "/developer_api_clients": {
      "get": {
        "tags": [
          "developer_api_clients"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_developer_api_clients",
        "summary": "List Developer API Clients",
        "parameters": [
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Page number of the API clients to fetch. Defaults to 1."
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Number of API clients to return in a single page. Defaults to 100. Max is 100."
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "required": true
                          },
                          "name": {
                            "type": "string",
                            "required": true
                          },
                          "api_privilege_group_id": {
                            "type": "number",
                            "required": true,
                            "description": "API client role ID"
                          },
                          "created_at": {
                            "type": "string",
                            "required": true,
                            "description": "Timestamp in ISO 8601 format"
                          },
                          "updated_at": {
                            "type": "string",
                            "required": true,
                            "description": "Timestamp in ISO 8601 format"
                          },
                          "all_folders": {
                            "type": "boolean",
                            "required": true,
                            "description": "Flag indicating whether API client has access to all folders"
                          },
                          "folder_ids": {
                            "type": "array",
                            "items": {
                              "type": "number"
                            },
                            "required": true,
                            "description": "Array of folder IDs. Available only when all_folders is false."
                          },
                          "environment_name": {
                            "type": "string",
                            "required": true,
                            "description": "Name of the environment. Available only if your workspace has environments enabled."
                          },
                          "environment_id": {
                            "type": "number",
                            "required": true,
                            "description": "ID of the environment. Available only if your workspace has environments enabled."
                          },
                          "token": {
                            "type": "object",
                            "properties": {
                              "updated_at": {
                                "type": "string",
                                "required": true,
                                "description": "Timestamp in ISO 8601 format"
                              }
                            },
                            "additionalProperties": false,
                            "required": [
                              "updated_at"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "name",
                          "api_privilege_group_id",
                          "created_at",
                          "updated_at",
                          "all_folders",
                          "folder_ids",
                          "environment_name",
                          "environment_id",
                          "token"
                        ]
                      }
                    },
                    "count": {
                      "type": "number",
                      "required": true,
                      "description": "Total number of items"
                    },
                    "page": {
                      "type": "number",
                      "required": true,
                      "description": "Current page number"
                    },
                    "per_page": {
                      "type": "number",
                      "required": true,
                      "description": "Number of items per page"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "count",
                    "page",
                    "per_page"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "List all Developer API clients"
      },
      "post": {
        "tags": [
          "developer_api_clients"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_developer_api_clients",
        "summary": "Create a Developer API Client",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Name of the API client"
                },
                "api_privilege_group_id": {
                  "type": "number",
                  "required": true,
                  "description": "API client role ID"
                },
                "all_folders": {
                  "type": "boolean",
                  "required": true,
                  "description": "Flag indicating whether API client has access to all folders"
                },
                "folder_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "description": "Array of folder IDs. Required if all_folders is false."
                },
                "environment_name": {
                  "type": "string",
                  "description": "Name of the environment. Required if your workspace has environments enabled."
                }
              },
              "additionalProperties": false,
              "required": [
                "name",
                "api_privilege_group_id",
                "all_folders"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "201": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "required": true
                    },
                    "name": {
                      "type": "string",
                      "required": true
                    },
                    "api_privilege_group_id": {
                      "type": "number",
                      "required": true,
                      "description": "API client role ID"
                    },
                    "created_at": {
                      "type": "string",
                      "required": true,
                      "description": "Timestamp in ISO 8601 format"
                    },
                    "updated_at": {
                      "type": "string",
                      "required": true,
                      "description": "Timestamp in ISO 8601 format"
                    },
                    "all_folders": {
                      "type": "boolean",
                      "required": true,
                      "description": "Flag indicating whether API client has access to all folders"
                    },
                    "folder_ids": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      },
                      "required": true,
                      "description": "Array of folder IDs. Available only when all_folders is false."
                    },
                    "environment_name": {
                      "type": "string",
                      "required": true,
                      "description": "Name of the environment. Available only if your workspace has environments enabled."
                    },
                    "environment_id": {
                      "type": "number",
                      "required": true,
                      "description": "ID of the environment. Available only if your workspace has environments enabled."
                    },
                    "token": {
                      "type": "object",
                      "properties": {
                        "updated_at": {
                          "type": "string",
                          "required": true,
                          "description": "Timestamp in ISO 8601 format"
                        },
                        "value": {
                          "type": "string",
                          "required": true
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "updated_at",
                        "value"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "api_privilege_group_id",
                    "created_at",
                    "updated_at",
                    "all_folders",
                    "folder_ids",
                    "environment_name",
                    "environment_id",
                    "token"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Create a Developer API client"
      }
    },
    "/developer_api_clients/{id}": {
      "get": {
        "tags": [
          "developer_api_clients"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_developer_api_clients_id",
        "summary": "Get a Developer API Client by ID",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "ID of the API client"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "required": true
                    },
                    "name": {
                      "type": "string",
                      "required": true
                    },
                    "api_privilege_group_id": {
                      "type": "number",
                      "required": true,
                      "description": "API client role ID"
                    },
                    "created_at": {
                      "type": "string",
                      "required": true,
                      "description": "Timestamp in ISO 8601 format"
                    },
                    "updated_at": {
                      "type": "string",
                      "required": true,
                      "description": "Timestamp in ISO 8601 format"
                    },
                    "all_folders": {
                      "type": "boolean",
                      "required": true,
                      "description": "Flag indicating whether API client has access to all folders"
                    },
                    "folder_ids": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      },
                      "required": true,
                      "description": "Array of folder IDs. Available only when all_folders is false."
                    },
                    "environment_name": {
                      "type": "string",
                      "required": true,
                      "description": "Name of the environment. Available only if your workspace has environments enabled."
                    },
                    "environment_id": {
                      "type": "number",
                      "required": true,
                      "description": "ID of the environment. Available only if your workspace has environments enabled."
                    },
                    "token": {
                      "type": "object",
                      "properties": {
                        "updated_at": {
                          "type": "string",
                          "required": true,
                          "description": "Timestamp in ISO 8601 format"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "updated_at"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "api_privilege_group_id",
                    "created_at",
                    "updated_at",
                    "all_folders",
                    "folder_ids",
                    "environment_name",
                    "environment_id",
                    "token"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Get a Developer API client by ID"
      },
      "put": {
        "tags": [
          "developer_api_clients"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_developer_api_clients_id",
        "summary": "Update a Developer API Client",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "ID of the API client"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the API client"
                },
                "api_privilege_group_id": {
                  "type": "number",
                  "description": "API client role ID"
                },
                "all_folders": {
                  "type": "boolean",
                  "description": "Flag indicating whether API client has access to all folders"
                },
                "folder_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "description": "Array of folder IDs. Required if all_folders is false."
                },
                "environment_name": {
                  "type": "string",
                  "description": "Name of the environment. Required if your workspace has environments enabled."
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "required": true
                    },
                    "name": {
                      "type": "string",
                      "required": true
                    },
                    "api_privilege_group_id": {
                      "type": "number",
                      "required": true,
                      "description": "API client role ID"
                    },
                    "created_at": {
                      "type": "string",
                      "required": true,
                      "description": "Timestamp in ISO 8601 format"
                    },
                    "updated_at": {
                      "type": "string",
                      "required": true,
                      "description": "Timestamp in ISO 8601 format"
                    },
                    "all_folders": {
                      "type": "boolean",
                      "required": true,
                      "description": "Flag indicating whether API client has access to all folders"
                    },
                    "folder_ids": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      },
                      "required": true,
                      "description": "Array of folder IDs. Available only when all_folders is false."
                    },
                    "environment_name": {
                      "type": "string",
                      "required": true,
                      "description": "Name of the environment. Available only if your workspace has environments enabled."
                    },
                    "environment_id": {
                      "type": "number",
                      "required": true,
                      "description": "ID of the environment. Available only if your workspace has environments enabled."
                    },
                    "token": {
                      "type": "object",
                      "properties": {
                        "updated_at": {
                          "type": "string",
                          "required": true,
                          "description": "Timestamp in ISO 8601 format"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "updated_at"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "api_privilege_group_id",
                    "created_at",
                    "updated_at",
                    "all_folders",
                    "folder_ids",
                    "environment_name",
                    "environment_id",
                    "token"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Update a Developer API client"
      },
      "delete": {
        "tags": [
          "developer_api_clients"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "delete_developer_api_clients_id",
        "summary": "Delete a Developer API Client",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "ID of the API client"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "string",
                  "required": true,
                  "description": "Always returns success upon successful deletion"
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Delete a Developer API client"
      }
    },
    "/developer_api_clients/{id}/regenerate": {
      "post": {
        "tags": [
          "developer_api_clients"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_developer_api_clients_id_regenerate",
        "summary": "Regenerate a Developer API Client token",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "ID of the API client"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "required": true
                    },
                    "name": {
                      "type": "string",
                      "required": true
                    },
                    "api_privilege_group_id": {
                      "type": "number",
                      "required": true,
                      "description": "API client role ID"
                    },
                    "created_at": {
                      "type": "string",
                      "required": true,
                      "description": "Timestamp in ISO 8601 format"
                    },
                    "updated_at": {
                      "type": "string",
                      "required": true,
                      "description": "Timestamp in ISO 8601 format"
                    },
                    "all_folders": {
                      "type": "boolean",
                      "required": true,
                      "description": "Flag indicating whether API client has access to all folders"
                    },
                    "folder_ids": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      },
                      "required": true,
                      "description": "Array of folder IDs. Available only when all_folders is false."
                    },
                    "environment_name": {
                      "type": "string",
                      "required": true,
                      "description": "Name of the environment. Available only if your workspace has environments enabled."
                    },
                    "environment_id": {
                      "type": "number",
                      "required": true,
                      "description": "ID of the environment. Available only if your workspace has environments enabled."
                    },
                    "token": {
                      "type": "object",
                      "properties": {
                        "updated_at": {
                          "type": "string",
                          "required": true,
                          "description": "Timestamp in ISO 8601 format"
                        },
                        "value": {
                          "type": "string",
                          "required": true
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "updated_at",
                        "value"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "api_privilege_group_id",
                    "created_at",
                    "updated_at",
                    "all_folders",
                    "folder_ids",
                    "environment_name",
                    "environment_id",
                    "token"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "result"
              ]
            }
          }
        },
        "description": "Regenerates the API token for an API client. This invalidates the previous API token."
      }
    },
    "/api_endpoints": {
      "get": {
        "tags": [
          "api_endpoints"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_api_endpoints",
        "summary": "List API endpoints",
        "parameters": [
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Page number of the API endpoints to fetch. Defaults to 1."
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Number of API endpoints to return in a single page. Defaults to 100. Max is 100."
          },
          {
            "name": "api_collection_id",
            "type": "number",
            "in": "query",
            "description": "ID of the API collection. If the parameter is not provided, all API endpoints are returned."
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/api_endpoint_fields"
              }
            }
          }
        },
        "description": "Lists all API endpoints. Specify the api_collection_id to obtain the list of endpoints in a specific collection."
      }
    },
    "/api_endpoints/{api_endpoint_id}/enable": {
      "put": {
        "tags": [
          "api_endpoints"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_api_endpoints_api_endpoint_id_enable",
        "summary": "Enable an API endpoint",
        "parameters": [
          {
            "name": "api_endpoint_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "ID of the API endpoint"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "required": true,
                  "description": "Action status"
                }
              },
              "additionalProperties": false,
              "required": [
                "success"
              ]
            }
          }
        },
        "description": "Enables an API endpoint. The underlying recipe must be started to enable the API endpoint successfully."
      }
    },
    "/api_endpoints/{api_endpoint_id}/disable": {
      "put": {
        "tags": [
          "api_endpoints"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_api_endpoints_api_endpoint_id_disable",
        "summary": "Disable an API endpoint",
        "parameters": [
          {
            "name": "api_endpoint_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "ID of the API endpoint"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "required": true,
                  "description": "Action status"
                }
              },
              "additionalProperties": false,
              "required": [
                "success"
              ]
            }
          }
        },
        "description": "Disables an active API endpoint. The endpoint can no longer be called by a client."
      }
    },
    "/connections": {
      "get": {
        "tags": [
          "connections"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_connections",
        "summary": "List connections belonging to user",
        "parameters": [
          {
            "name": "provider",
            "type": "string",
            "in": "query",
            "description": "Connector identifier. Eg: 'salesforce' etc."
          },
          {
            "name": "folder_id",
            "type": "string",
            "in": "query",
            "description": "Folder id where connections are stored."
          },
          {
            "name": "parent_id",
            "type": "string",
            "in": "query",
            "description": "Id of parent connection to get all children."
          },
          {
            "name": "external_id",
            "type": "string",
            "in": "query",
            "description": "External identifier given to the user who owns the runtime user connection."
          },
          {
            "name": "include_runtime_connections",
            "type": "string",
            "in": "query",
            "description": "Flag to define either include or not runtime connections. Default: false"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/connection_fields"
              }
            }
          }
        },
        "description": "Return all connections of current user"
      },
      "post": {
        "tags": [
          "connections"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_connections",
        "summary": "Creates a new connection",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "provider": {
                  "type": "string",
                  "required": true,
                  "description": "Connector identifier. Eg: 'salesforce' etc."
                },
                "name": {
                  "type": "string",
                  "description": "Connection name. Eg: 'Prod Salesforce connection' etc."
                },
                "folder_id": {
                  "type": "number",
                  "description": "Folder id where connection should be stored."
                },
                "parent_id": {
                  "type": "number",
                  "description": "Id of parent connection."
                },
                "external_id": {
                  "type": "string",
                  "description": "External identifier given to the user who owns the runtime user connection."
                },
                "input": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Connection setting fields"
                },
                "oauth_token_pair": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string"
                    },
                    "refresh_token": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false,
              "required": [
                "provider"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/connection_fields"
            }
          }
        },
        "description": "Creates a new connection. This endpoint supports the following actions:\n\n1. Create a shell connection, or\n2. Create and authenticate a connection (not supported for OAuth type connections)\n"
      }
    },
    "/api/developer_api_client_roles": {
      "get": {
        "tags": [
          "developer_api_client_roles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "getapi_developer_api_client_roles",
        "summary": "List API client roles belonging to user",
        "parameters": [
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Page number(defaults to 1)"
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Page size(defaults to 100. Max allowed is 100)"
          }
        ],
        "responses": {
          "500": {
            "description": "Server error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "description": ""
      }
    },
    "/project_builds/{id}": {
      "get": {
        "tags": [
          "project_builds"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_project_builds_id",
        "summary": "Get project build",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Project build ID"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "description": ""
      }
    },
    "/project_builds/{id}/deploy": {
      "post": {
        "tags": [
          "project_builds"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_project_builds_id_deploy",
        "summary": "Deploy project build",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Project build ID"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string",
                  "description": "Description"
                },
                "environment_type": {
                  "type": "string",
                  "required": true,
                  "description": "Environment type"
                }
              },
              "additionalProperties": false,
              "required": [
                "environment_type"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "description": ""
      }
    },
    "/roles": {
      "get": {
        "tags": [
          "roles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_roles",
        "summary": "List custom roles belonging to user",
        "parameters": [
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Page number(defaults to 1)"
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Page size(defaults to 100. Max allowed is 100)"
          },
          {
            "name": "role_name",
            "type": "string",
            "in": "query",
            "description": "Filter by role_name"
          }
        ],
        "responses": {
          "500": {
            "description": "Server error"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "description": "Return all custom roles of current user"
      }
    },
    "/roles/{id}/copy": {
      "post": {
        "tags": [
          "roles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_roles_id_copy",
        "summary": "Make a copy of an existing role",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Name of the new role"
                },
                "folder_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Array of project folder ids to override. The source folder ids are copied as is when not provided"
                }
              },
              "additionalProperties": false,
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Server error"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "description": "Return the newly created role"
      }
    },
    "/roles/{id}": {
      "put": {
        "tags": [
          "roles"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "put_roles_id",
        "summary": "Update folders for role",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "folder_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Folder ids for role"
                },
                "all_folders": {
                  "type": "string",
                  "enum": [
                    "true",
                    "false"
                  ],
                  "required": true,
                  "description": "Tells if it's an all folders access. Possible values 'true'/'false'"
                }
              },
              "additionalProperties": false,
              "required": [
                "all_folders"
              ]
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Server error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "description": "Update folders for role"
      }
    },
    "/secrets_management/clear_cache": {
      "post": {
        "tags": [
          "secrets_managements"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_secrets_management_clear_cache",
        "summary": "Clear secrets cache",
        "parameters": [

        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        },
        "description": ""
      }
    },
    "/api_clients": {
      "get": {
        "tags": [
          "api_customers"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_api_clients",
        "summary": "List API clients",
        "parameters": [
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Page number of the API clients to fetch. Defaults to 1."
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Number of API clients to return in a single page. Defaults to 100. Max is 100."
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/api_client_fields"
              }
            }
          }
        },
        "description": "List all API clients. This endpoint includes the project_id to which the API client belongs in the response."
      },
      "post": {
        "tags": [
          "api_customers"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post_api_clients",
        "summary": "Create an API client",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Name of the client"
                },
                "project_id": {
                  "type": "string",
                  "description": "The ID of a specific project. Retrieve a list of project IDs by using the list projects endpoint."
                }
              },
              "additionalProperties": false,
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "Not found"
          },
          "200": {
            "description": "Success reply",
            "schema": {
              "$ref": "#/definitions/api_client_fields"
            }
          }
        },
        "description": "Create a new API client within a project you specify"
      }
    },
    "/integrations": {
      "get": {
        "tags": [
          "adapters"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_integrations",
        "summary": "Query connector metadata. Requires 'oem_vendor' privilege.",
        "parameters": [
          {
            "name": "applications",
            "type": "string",
            "in": "query",
            "description": "Comma separated connector identifiers(e.g: salesforce,service_now)"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        },
        "description": ""
      }
    },
    "/integrations/all": {
      "get": {
        "tags": [
          "adapters"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "get_integrations_all",
        "summary": "Returns paginated list of standard connectors ordered by name. Requires 'oem_vendor' privilege.",
        "parameters": [
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "Page number (defaults to 1)"
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "Page size (defaults to 100. Max allowed is 100)"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        },
        "description": ""
      }
    }
  },
  "definitions": {
    "on_prem_agent_fields": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "required": true,
          "description": "On-prem agent ID"
        },
        "on_prem_group_id": {
          "type": "number",
          "required": true,
          "description": "On-prem group ID"
        },
        "name": {
          "type": "string",
          "required": true,
          "description": "On-prem agent name"
        },
        "cn": {
          "type": "string",
          "required": true,
          "description": "Common name of on-prem agent"
        },
        "os": {
          "type": "string",
          "enum": [
            "windows",
            "linux",
            "mac",
            "docker",
            null
          ],
          "required": true,
          "description": "The server operating system"
        },
        "awaiting_setup": {
          "type": "boolean",
          "required": true,
          "description": "True if agent is not configured"
        },
        "enabled": {
          "type": "boolean",
          "required": true,
          "description": "True if agent is enabled"
        },
        "last_seen_version": {
          "type": "string",
          "required": true,
          "description": "Last known version of the On-prem agent"
        },
        "created_at": {
          "type": "string",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        },
        "updated_at": {
          "type": "string",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        },
        "state": {
          "type": "string",
          "required": true,
          "description": "State of the On-prem agent"
        },
        "state_error": {
          "type": "string",
          "required": true,
          "description": "Error in the On-prem agent's state. Returns null if no error."
        },
        "config_version": {
          "type": "string",
          "enum": [
            "number",
            null
          ],
          "required": true,
          "description": "Version of the configuration"
        }
      },
      "additionalProperties": false,
      "required": [
        "id",
        "on_prem_group_id",
        "name",
        "cn",
        "os",
        "awaiting_setup",
        "enabled",
        "last_seen_version",
        "created_at",
        "updated_at",
        "state",
        "state_error",
        "config_version"
      ]
    },
    "api_collection_fields": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "required": true,
          "description": "ID of the collection"
        },
        "name": {
          "type": "string",
          "required": true,
          "description": "Name of the collection"
        },
        "version": {
          "type": "string",
          "required": true,
          "description": "Version of the API collection"
        },
        "url": {
          "type": "string",
          "required": true,
          "description": "Base URL for the API collection"
        },
        "api_spec_url": {
          "type": "string",
          "required": true,
          "description": "URL for the OpenAPI specification of the API collection"
        },
        "project_id": {
          "type": "number",
          "required": true,
          "description": "ID of the project associated with this API collection. If null, the API collection has access across all projects."
        },
        "created_at": {
          "type": "string",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        },
        "updated_at": {
          "type": "string",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        }
      },
      "additionalProperties": false,
      "required": [
        "id",
        "name",
        "version",
        "url",
        "api_spec_url",
        "project_id",
        "created_at",
        "updated_at"
      ]
    },
    "lookup_table_fields": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "required": true,
          "description": "Lookup table ID"
        },
        "name": {
          "type": "string",
          "required": true,
          "description": "Lookup table name"
        },
        "schema": {
          "type": "string",
          "required": true,
          "description": "Stringified Lookup table schema"
        },
        "project_id": {
          "type": "string",
          "required": true,
          "description": "ID of the project associated with this lookup table. Returns null, if the lookup table is accessible to all projects."
        },
        "created_at": {
          "type": "string",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        },
        "updated_at": {
          "type": "string",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        }
      },
      "additionalProperties": false,
      "required": [
        "id",
        "name",
        "schema",
        "project_id",
        "created_at",
        "updated_at"
      ]
    },
    "lookup_table_row_fields": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "required": true,
          "description": "Lookup table row ID"
        },
        "data": {
          "type": "object",
          "additionalProperties": true,
          "required": true,
          "description": "The hash containing the data for the row in the form of column_name:value pairs. For example, { \"name\": \"United States\", \"code\": \"USA\" }"
        },
        "created_at": {
          "type": "string",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        },
        "updated_at": {
          "type": "string",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        }
      },
      "additionalProperties": false,
      "required": [
        "id",
        "data",
        "created_at",
        "updated_at"
      ]
    },
    "get_api_access_profiles_fields": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "required": true,
          "description": "ID of the access profile"
        },
        "name": {
          "type": "string",
          "required": true,
          "description": "Name of the access profile"
        },
        "api_client_id": {
          "type": "number",
          "required": true,
          "description": "ID of the API client to which this access profile belongs to"
        },
        "api_collection_ids": {
          "type": "array",
          "items": {
            "type": "number"
          },
          "required": true,
          "description": "IDs of the API collections that are accessible by this access profile"
        },
        "active": {
          "type": "boolean",
          "required": true,
          "description": "Returns whether the access profile is disabled or enabled"
        },
        "auth_type": {
          "type": "string",
          "required": true,
          "description": "Authentication method used in the access profile. Returns one of token, jwt, oauth2 and oidc."
        },
        "created_at": {
          "type": "string",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        },
        "updated_at": {
          "type": "string",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        }
      },
      "additionalProperties": false,
      "required": [
        "id",
        "name",
        "api_client_id",
        "api_collection_ids",
        "active",
        "auth_type",
        "created_at",
        "updated_at"
      ]
    },
    "export_manifest_response": {
      "type": "object",
      "properties": {
        "result": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "description": "ID"
            },
            "last_exported_at": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "description": "Manifest name"
            },
            "project_path": {
              "type": "string",
              "description": "Project path"
            },
            "status": {
              "type": "string",
              "enum": [
                "working",
                "archived"
              ],
              "description": "Status of manifest"
            },
            "diff_included": {
              "type": "boolean",
              "description": "Diff included"
            },
            "assets": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Array of assets"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "operation_result": {
      "type": "object",
      "properties": {
        "result": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "error": {
              "type": "string"
            },
            "status": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "secure_gateway_tunnel_fields": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "required": true,
          "description": "On-prem group ID"
        },
        "name": {
          "type": "string",
          "required": true,
          "description": "On-prem group name"
        },
        "created_at": {
          "type": "string",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        },
        "in_use": {
          "type": "boolean",
          "required": true,
          "description": "Indicates whether the On-prem group has any associated connections"
        },
        "use_managed_connection": {
          "type": "boolean",
          "required": true,
          "description": "Indicates whether the On-prem group supports cloud profiles"
        },
        "config_version": {
          "type": "number",
          "required": true,
          "description": "Version of the configuration"
        }
      },
      "additionalProperties": false,
      "required": [
        "id",
        "name",
        "created_at",
        "in_use",
        "use_managed_connection",
        "config_version"
      ]
    },
    "folder_fields": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "required": true,
          "description": "Folder ID"
        },
        "name": {
          "type": "string",
          "required": true,
          "description": "Folder name"
        },
        "parent_id": {
          "type": "number",
          "required": true,
          "description": "Parent folder ID"
        },
        "created_at": {
          "type": "string",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        },
        "updated_at": {
          "type": "string",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        }
      },
      "additionalProperties": false,
      "required": [
        "id",
        "name",
        "parent_id",
        "created_at",
        "updated_at"
      ]
    },
    "embedded_customer_fields": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "required": true,
          "description": "Customer workspace ID"
        },
        "external_id": {
          "type": "string",
          "required": true,
          "description": "External ID of the Embedded customer"
        },
        "name": {
          "type": "string",
          "required": true,
          "description": "Full name of the customer"
        },
        "environments": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "required": true,
                "description": "Environment ID"
              },
              "environment_type": {
                "type": "string",
                "required": true,
                "description": "Environment Type"
              }
            },
            "additionalProperties": false,
            "required": [
              "id",
              "environment_type"
            ]
          }
        },
        "notification_email": {
          "type": "string",
          "required": true,
          "description": "Comma-separated list of notification emails"
        },
        "full_embedding": {
          "type": "boolean",
          "required": true,
          "description": "Indicates if fully embedded"
        },
        "admin_notification_emails": {
          "type": "string",
          "required": true,
          "description": "Comma-separated list of admin notification emails"
        },
        "error_notification_emails": {
          "type": "string",
          "required": true,
          "description": "Comma-separated list of error notification emails"
        },
        "plan_id": {
          "type": "string",
          "required": true,
          "description": "ID of the plan assigned to this customer"
        },
        "origin_url": {
          "type": "string",
          "required": true,
          "description": "Origin URL where the embedded IFrame is hosted"
        },
        "trial": {
          "type": "boolean",
          "required": true,
          "description": "Indicates if the customer account is in trial"
        },
        "in_trial": {
          "type": "boolean",
          "required": true,
          "description": "Indicates if the customer account is in trial"
        },
        "whitelisted_apps": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "required": true,
          "description": "List of whitelisted applications"
        },
        "frame_ancestors": {
          "type": "string",
          "required": true,
          "description": "Comma-separated list of frame ancestor URLs"
        },
        "created_at": {
          "type": "string",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        },
        "updated_at": {
          "type": "string",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        },
        "time_zone": {
          "type": "string",
          "required": true,
          "description": "Time zone name"
        },
        "auth_settings": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "workato_auth",
                "two_fa_auth",
                "saml_sso"
              ],
              "required": true,
              "description": "Type of authentication defined for the customer account"
            },
            "provider": {
              "type": "string",
              "required": true,
              "description": "Name of the SAML provider"
            },
            "metadata_url": {
              "type": "string",
              "required": true,
              "description": "URL to the SAML provider's metadata XML file, which contains configuration details for SAML authentication."
            },
            "sso_url": {
              "type": "string",
              "required": true,
              "description": "Single Sign-On URL provided by the SAML provider for initiating user authentication"
            },
            "saml_issuer": {
              "type": "string",
              "required": true,
              "description": "Unique identifier for the SAML provider, often used to identify the issuer of SAML assertions."
            },
            "x509_cert": {
              "type": "string",
              "required": true,
              "description": "X.509 certificate provided by the SAML provider, used to verify the signature of SAML assertions."
            },
            "jit_provisioning": {
              "type": "boolean",
              "required": true,
              "description": "Indicates if Just-In-Time provisioning is enabled, allowing users to be created upon first sign-in."
            }
          },
          "additionalProperties": false,
          "required": [
            "type",
            "provider",
            "metadata_url",
            "sso_url",
            "saml_issuer",
            "x509_cert",
            "jit_provisioning"
          ]
        },
        "current_billing_period_start": {
          "type": "string",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        },
        "current_billing_period_end": {
          "type": "string",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        },
        "task_limit_adjustment": {
          "type": "string",
          "required": true,
          "description": "Task limit adjustment for current accounting period. Only valid for task-based plans. "
        },
        "task_limit": {
          "type": "number",
          "required": true,
          "description": "Task limit"
        },
        "task_count": {
          "type": "number",
          "required": true,
          "description": "Tasks used by the customer"
        },
        "active_connection_limit": {
          "type": "number",
          "required": true,
          "description": "Maximum active connections allowed for this customer"
        },
        "active_connection_count": {
          "type": "number",
          "required": true,
          "description": "Number of active connections in the customer's workspace"
        },
        "active_recipe_count": {
          "type": "number",
          "required": true,
          "description": "Number of running recipes in the customer's workspace"
        }
      },
      "additionalProperties": false,
      "required": [
        "id",
        "external_id",
        "name",
        "environments",
        "notification_email",
        "full_embedding",
        "admin_notification_emails",
        "error_notification_emails",
        "plan_id",
        "origin_url",
        "trial",
        "in_trial",
        "whitelisted_apps",
        "frame_ancestors",
        "created_at",
        "updated_at",
        "time_zone",
        "auth_settings",
        "current_billing_period_start",
        "current_billing_period_end",
        "task_limit_adjustment",
        "task_limit",
        "task_count",
        "active_connection_limit",
        "active_connection_count",
        "active_recipe_count"
      ]
    },
    "plan_fields": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "required": true,
          "description": "Customer workspace ID"
        },
        "plan_id": {
          "type": "string",
          "required": true,
          "description": "Plan ID"
        },
        "trial": {
          "type": "boolean",
          "required": true,
          "description": "Indicates if the customer account is in trial"
        }
      },
      "additionalProperties": false,
      "required": [
        "id",
        "plan_id",
        "trial"
      ]
    },
    "package_fields": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "required": true,
          "description": "Package ID"
        },
        "operation_type": {
          "type": "string",
          "enum": [
            "import",
            "export"
          ],
          "required": true,
          "description": "Operation type: import or export"
        },
        "status": {
          "type": "string",
          "enum": [
            "completed",
            "in_progress",
            "failed"
          ],
          "required": true,
          "description": "Operation status: completed, in_progress, failed"
        },
        "error": {
          "type": "string",
          "required": true,
          "description": "Error description if export operation failed"
        }
      },
      "additionalProperties": false,
      "required": [
        "id",
        "operation_type",
        "status",
        "error"
      ]
    },
    "api_endpoint_fields": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "required": true,
          "description": "ID of the API endpoint"
        },
        "api_collection_id": {
          "type": "number",
          "required": true,
          "description": "ID of the API collection"
        },
        "flow_id": {
          "type": "number",
          "required": true,
          "description": "ID of the API recipe associated with this endpoint"
        },
        "name": {
          "type": "string",
          "required": true,
          "description": "Name of the endpoint"
        },
        "method": {
          "type": "string",
          "required": true,
          "description": "HTTP method used by the endpoint (GET, POST, etc.)"
        },
        "url": {
          "type": "string",
          "required": true,
          "description": "URL for accessing the endpoint"
        },
        "legacy_url": {
          "type": "string",
          "required": true,
          "description": "Legacy URL (if applicable)"
        },
        "base_path": {
          "type": "string",
          "required": true,
          "description": "Base path for the endpoint"
        },
        "path": {
          "type": "string",
          "required": true,
          "description": "Specific path for the endpoint"
        },
        "active": {
          "type": "boolean",
          "required": true,
          "description": "Indicates if the endpoint is active"
        },
        "legacy": {
          "type": "boolean",
          "required": true,
          "description": "Indicates if the endpoint is a legacy endpoint"
        },
        "created_at": {
          "type": "string",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        },
        "updated_at": {
          "type": "string",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        }
      },
      "additionalProperties": false,
      "required": [
        "id",
        "api_collection_id",
        "flow_id",
        "name",
        "method",
        "url",
        "legacy_url",
        "base_path",
        "path",
        "active",
        "legacy",
        "created_at",
        "updated_at"
      ]
    },
    "project_fields": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "required": true,
          "description": "Project ID"
        },
        "description": {
          "type": "string",
          "required": true,
          "description": "Description"
        },
        "folder_id": {
          "type": "number",
          "required": true,
          "description": "Related folder ID. Projects are essentially top-level folders."
        },
        "name": {
          "type": "string",
          "required": true,
          "description": "Project name"
        }
      },
      "additionalProperties": false,
      "required": [
        "id",
        "description",
        "folder_id",
        "name"
      ]
    },
    "api_client_fields": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "required": true,
          "description": "ID of the API client"
        },
        "name": {
          "type": "string",
          "required": true,
          "description": "Name of the API client"
        },
        "project_id": {
          "type": "number",
          "required": true,
          "description": "ID of the project associated with this API client. If null, the API client has access across all projects."
        },
        "created_at": {
          "type": "number",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        },
        "updated_at": {
          "type": "number",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        }
      },
      "additionalProperties": false,
      "required": [
        "id",
        "name",
        "project_id",
        "created_at",
        "updated_at"
      ]
    },
    "customer_manager_grant": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "required": true
        },
        "user": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "required": true
            },
            "name": {
              "type": "string",
              "required": true
            },
            "email": {
              "type": "string",
              "required": true
            },
            "avatar_url": {
              "type": "string",
              "required": true
            }
          },
          "additionalProperties": false,
          "required": [
            "id",
            "name",
            "email",
            "avatar_url"
          ]
        },
        "privilege_group": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "required": true
            },
            "name": {
              "type": "string",
              "required": true
            },
            "system": {
              "type": "string",
              "required": true
            }
          },
          "additionalProperties": false,
          "required": [
            "id",
            "name",
            "system"
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "id"
      ]
    },
    "custom_connector_fields": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "required": true,
          "description": "Custom connector ID"
        },
        "name": {
          "type": "string",
          "required": true,
          "description": "Custom connector name"
        },
        "titile": {
          "type": "string",
          "required": true,
          "description": "Custom connector title"
        },
        "latest_released_version": {
          "type": "number",
          "required": true,
          "description": "Custom connector latest released version number"
        },
        "latest_released_version_note": {
          "type": "string",
          "required": true,
          "description": "Custom connector latest released version note"
        },
        "released_versions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "version": {
                "type": "number",
                "required": true,
                "description": "Version number"
              },
              "version_note": {
                "type": "string",
                "required": true,
                "description": "Version note"
              },
              "created_at": {
                "type": "string",
                "required": true,
                "description": "Timestamp in ISO 8601 format"
              },
              "released_at": {
                "type": "string",
                "required": true,
                "description": "Timestamp in ISO 8601 format"
              }
            },
            "additionalProperties": false,
            "required": [
              "version",
              "version_note",
              "created_at",
              "released_at"
            ]
          }
        }
      },
      "additionalProperties": false,
      "required": [
        "id",
        "name",
        "titile",
        "latest_released_version",
        "latest_released_version_note",
        "released_versions"
      ]
    },
    "custom_connector_extended_fields": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "required": true,
          "description": "Custom connector ID"
        },
        "name": {
          "type": "string",
          "required": true,
          "description": "Custom connector name"
        },
        "titile": {
          "type": "string",
          "required": true,
          "description": "Custom connector title"
        },
        "logo": {
          "type": "string",
          "required": true,
          "description": "Base64 encoded logo"
        },
        "latest_version": {
          "type": "number",
          "required": true,
          "description": "Latest version number"
        },
        "latest_version_note": {
          "type": "string",
          "required": true,
          "description": "Latest version note"
        },
        "latest_released_version": {
          "type": "number",
          "required": true,
          "description": "Custom connector latest released version number"
        },
        "latest_released_version_note": {
          "type": "string",
          "required": true,
          "description": "Latest released version note"
        },
        "latest_shared_version": {
          "type": "number",
          "required": true,
          "description": "Latest shared version number"
        },
        "latest_shared_version_note": {
          "type": "string",
          "required": true,
          "description": "Latest shared version note"
        },
        "oem_shared_version": {
          "type": "number",
          "required": true,
          "description": "Version number of the customer connector shared with OEM customers. Available only for OEM Admins"
        },
        "oem_shared_at": {
          "type": "string",
          "required": true,
          "description": "Timestamp in ISO 8601 format. Available only for OEM Admins"
        },
        "recent_released_versions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "version": {
                "type": "number",
                "required": true,
                "description": "Version number"
              },
              "version_note": {
                "type": "string",
                "required": true,
                "description": "Version note"
              },
              "created_at": {
                "type": "string",
                "required": true,
                "description": "Timestamp in ISO 8601 format"
              },
              "released_at": {
                "type": "string",
                "required": true,
                "description": "Timestamp in ISO 8601 format"
              }
            },
            "additionalProperties": false,
            "required": [
              "version",
              "version_note",
              "created_at",
              "released_at"
            ]
          }
        }
      },
      "additionalProperties": false,
      "required": [
        "id",
        "name",
        "titile",
        "logo",
        "latest_version",
        "latest_version_note",
        "latest_released_version",
        "latest_released_version_note",
        "latest_shared_version",
        "latest_shared_version_note",
        "oem_shared_version",
        "oem_shared_at",
        "recent_released_versions"
      ]
    },
    "connection_fields": {
      "type": "object",
      "properties": {
        "application": {
          "type": "string",
          "required": true,
          "description": "Connection provider"
        },
        "id": {
          "type": "number",
          "required": true
        },
        "name": {
          "type": "string",
          "required": true
        },
        "description": {
          "type": "string",
          "required": true
        },
        "authorized_at": {
          "type": "string",
          "description": "Timestamp in ISO 8601 format"
        },
        "authorization_status": {
          "type": "string",
          "description": "Value can be 'success', 'exception' or nil"
        },
        "authorization_error": {
          "type": "string",
          "description": "Error message on authorization failure"
        },
        "created_at": {
          "type": "string",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        },
        "updated_at": {
          "type": "string",
          "required": true,
          "description": "Timestamp in ISO 8601 format"
        },
        "parent_id": {
          "type": "number",
          "description": "Id of parent connection"
        },
        "external_id": {
          "type": "number",
          "description": "External identifier given to the user who owns the runtime user connection"
        },
        "folder_id": {
          "type": "number",
          "description": "Id of folder where connection is stored"
        }
      },
      "additionalProperties": false,
      "required": [
        "application",
        "id",
        "name",
        "description",
        "created_at",
        "updated_at"
      ]
    }
  },
  "schemes": [
    "http"
  ],
  "tags": [
    {
      "name": "on_prem_agents",
      "description": "APIs for working On-prem Agents"
    },
    {
      "name": "jobs",
      "description": "The Embedded Partner APIs for working with customer's recipe jobs. Requires 'oem_vendor' privilege."
    },
    {
      "name": "packages",
      "description": "APIs for exporting/importing packages"
    },
    {
      "name": "api_groups",
      "description": "APIs for working with user's API collections"
    },
    {
      "name": "job",
      "description": "APIs related to resuming a job"
    },
    {
      "name": "lookup_tables",
      "description": "APIs for working with Lookup Tables"
    },
    {
      "name": "pubsub",
      "description": "APIs for working with pubsub"
    },
    {
      "name": "api_access_profiles",
      "description": "APIs for working with user's API access profiles"
    },
    {
      "name": "export_manifests",
      "description": "The Embedded Partner APIs for manipulating customer's Export Manifests"
    },
    {
      "name": "secure_gateway_tunnels",
      "description": "APIs for managing On-prem groups"
    },
    {
      "name": "custom_oauth_profiles",
      "description": "APIs for working with user's custom OAuth profiles"
    },
    {
      "name": "oem_api_groups",
      "description": "The Embedded Partner APIs for working with customer's API collections. Requires 'oem_vendor' privilege."
    },
    {
      "name": "oem_folders",
      "description": "The Embedded Partner APIs for working with customer's API endpoints"
    },
    {
      "name": "oem_package_exports",
      "description": "The Embedded Partner APIs for working with customer's package exports. Requires 'oem_vendor' privilege."
    },
    {
      "name": "oem_access_profiles",
      "description": "The Embedded Partner APIs for working with customer's API access profiles. Requires 'oem_vendor' privilege."
    },
    {
      "name": "managed_users",
      "description": "The Embedded Partner APIs for working with customers. Requires 'oem_vendor' privilege."
    },
    {
      "name": "oem_properties",
      "description": "The Embedded Partner APIs for working with customer's API endpoints"
    },
    {
      "name": "imports",
      "description": "The Embedded Partner APIs for working with customer's package imports. Requires 'oem_vendor' privilege."
    },
    {
      "name": "recipes",
      "description": "APIs for working with recipes"
    },
    {
      "name": "oem_recipes",
      "description": "API for OEM recipes manipulations"
    },
    {
      "name": "oem_default_custom_oauth_profiles",
      "description": "The Embedded Partner APIs for working with customer's custom OAuth profiles. Requires 'oem_vendor' privilege."
    },
    {
      "name": "oem_api_endpoints",
      "description": "The Embedded Partner APIs for working with customer's API endpoints. Requires 'oem_vendor' privilege."
    },
    {
      "name": "oem_connections",
      "description": "The Embedded Partner APIs for working with customer's connections. Requires 'oem_vendor' privilege."
    },
    {
      "name": "members",
      "description": "      APIs for working with collaborators\n"
    },
    {
      "name": "oem_roles",
      "description": "The Embedded Partner APIs for working with customer's API endpoints"
    },
    {
      "name": "projects",
      "description": "APIs for working with projects. Projects are top-level folders that normally encompass a single use case."
    },
    {
      "name": "oem_api_customers",
      "description": "The Embedded Partner APIs for working with customer's API clients. Requires 'oem_vendor' privilege."
    },
    {
      "name": "customer_managers",
      "description": "APIs for manage customer managers"
    },
    {
      "name": "oem_account",
      "description": "API for OEM Account manipulations"
    },
    {
      "name": "custom_connectors",
      "description": "APIs for working with custom connectors"
    },
    {
      "name": "users",
      "description": "      APIs for working with users\n"
    },
    {
      "name": "folders",
      "description": "APIs for working with folders"
    },
    {
      "name": "properties",
      "description": "APIs for working with properties"
    },
    {
      "name": "generate_schemas",
      "description": "SDK utility APIs for building schema definition from sample document. Supports documents of size up to 5 Megabytes."
    },
    {
      "name": "developer_api_clients",
      "description": "APIs for working with user's developer API clients"
    },
    {
      "name": "api_endpoints",
      "description": "APIs for working with user's API endpoints"
    },
    {
      "name": "connections",
      "description": "APIs for working with user's connections"
    },
    {
      "name": "developer_api_client_roles",
      "description": "APIs for working with user's API client roles"
    },
    {
      "name": "roles",
      "description": "APIs for working with user's API endpoints"
    },
    {
      "name": "secrets_managements",
      "description": "APIs for working with Secrets Management feature"
    },
    {
      "name": "api_customers",
      "description": "APIs for working with user's API clients"
    },
    {
      "name": "adapters",
      "description": "Connector metadata"
    }
  ],
  "securityDefinitions": {
    "APIKey": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "Enter the token with the 'Bearer ' prefix, e.g. \"Bearer abcde12345\""
    }
  },
  "security": [
    {
      "APIKey": [

      ]
    }
  ],
  "host": "localhost:3000"
}